/* automatically generated by rust-bindgen */
/* with some manual edits commented thus -- +EDIT..-EDIT */

// +EDIT
#![allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
// -EDIT

pub const xltypeNum: u32 = 1;
pub const xltypeStr: u32 = 2;
pub const xltypeBool: u32 = 4;
pub const xltypeRef: u32 = 8;
pub const xltypeErr: u32 = 16;
pub const xltypeFlow: u32 = 32;
pub const xltypeMulti: u32 = 64;
pub const xltypeMissing: u32 = 128;
pub const xltypeNil: u32 = 256;
pub const xltypeSRef: u32 = 1024;
pub const xltypeInt: u32 = 2048;
pub const xlbitXLFree: u32 = 4096;
pub const xlbitDLLFree: u32 = 16384;
pub const xltypeBigData: u32 = 2050;
pub const xlerrNull: u32 = 0;
pub const xlerrDiv0: u32 = 7;
pub const xlerrValue: u32 = 15;
pub const xlerrRef: u32 = 23;
pub const xlerrName: u32 = 29;
pub const xlerrNum: u32 = 36;
pub const xlerrNA: u32 = 42;
pub const xlerrGettingData: u32 = 43;
pub const xlflowHalt: u32 = 1;
pub const xlflowGoto: u32 = 2;
pub const xlflowRestart: u32 = 8;
pub const xlflowPause: u32 = 16;
pub const xlflowResume: u32 = 64;
pub const xlretSuccess: u32 = 0;
pub const xlretAbort: u32 = 1;
pub const xlretInvXlfn: u32 = 2;
pub const xlretInvCount: u32 = 4;
pub const xlretInvXloper: u32 = 8;
pub const xlretStackOvfl: u32 = 16;
pub const xlretFailed: u32 = 32;
pub const xlretUncalced: u32 = 64;
pub const xlretNotThreadSafe: u32 = 128;
pub const xlretInvAsynchronousContext: u32 = 256;
pub const xlretNotClusterSafe: u32 = 512;
pub const xleventCalculationEnded: u32 = 1;
pub const xleventCalculationCanceled: u32 = 2;
pub const xlCommand: u32 = 32768;
pub const xlSpecial: u32 = 16384;
pub const xlIntl: u32 = 8192;
pub const xlPrompt: u32 = 4096;
pub const xlFree: u32 = 16384;
pub const xlStack: u32 = 16385;
pub const xlCoerce: u32 = 16386;
pub const xlSet: u32 = 16387;
pub const xlSheetId: u32 = 16388;
pub const xlSheetNm: u32 = 16389;
pub const xlAbort: u32 = 16390;
pub const xlGetInst: u32 = 16391;
pub const xlGetHwnd: u32 = 16392;
pub const xlGetName: u32 = 16393;
pub const xlEnableXLMsgs: u32 = 16394;
pub const xlDisableXLMsgs: u32 = 16395;
pub const xlDefineBinaryName: u32 = 16396;
pub const xlGetBinaryName: u32 = 16397;
pub const xlGetFmlaInfo: u32 = 16398;
pub const xlGetMouseInfo: u32 = 16399;
pub const xlAsyncReturn: u32 = 16400;
pub const xlEventRegister: u32 = 16401;
pub const xlRunningOnCluster: u32 = 16402;
pub const xlModeReady: u32 = 0;
pub const xlModeEnter: u32 = 1;
pub const xlModeEdit: u32 = 2;
pub const xlModePoint: u32 = 4;
pub const dtNil: u32 = 127;
pub const dtSheet: u32 = 0;
pub const dtProc: u32 = 1;
pub const dtChart: u32 = 2;
pub const dtBasic: u32 = 6;
pub const htNone: u32 = 0;
pub const htClient: u32 = 1;
pub const htVSplit: u32 = 2;
pub const htHSplit: u32 = 3;
pub const htColWidth: u32 = 4;
pub const htRwHeight: u32 = 5;
pub const htRwColHdr: u32 = 6;
pub const htObject: u32 = 7;
pub const htTopLeft: u32 = 8;
pub const htBotLeft: u32 = 9;
pub const htLeft: u32 = 10;
pub const htTopRight: u32 = 11;
pub const htBotRight: u32 = 12;
pub const htRight: u32 = 13;
pub const htTop: u32 = 14;
pub const htBot: u32 = 15;
pub const htRwGut: u32 = 16;
pub const htColGut: u32 = 17;
pub const htTextBox: u32 = 18;
pub const htRwLevels: u32 = 19;
pub const htColLevels: u32 = 20;
pub const htDman: u32 = 21;
pub const htDmanFill: u32 = 22;
pub const htXSplit: u32 = 23;
pub const htVertex: u32 = 24;
pub const htAddVtx: u32 = 25;
pub const htDelVtx: u32 = 26;
pub const htRwHdr: u32 = 27;
pub const htColHdr: u32 = 28;
pub const htRwShow: u32 = 29;
pub const htColShow: u32 = 30;
pub const htSizing: u32 = 31;
pub const htSxpivot: u32 = 32;
pub const htTabs: u32 = 33;
pub const htEdit: u32 = 34;
pub const xlUDF: u32 = 255;
pub const xlfCount: u32 = 0;
pub const xlfIsna: u32 = 2;
pub const xlfIserror: u32 = 3;
pub const xlfSum: u32 = 4;
pub const xlfAverage: u32 = 5;
pub const xlfMin: u32 = 6;
pub const xlfMax: u32 = 7;
pub const xlfRow: u32 = 8;
pub const xlfColumn: u32 = 9;
pub const xlfNa: u32 = 10;
pub const xlfNpv: u32 = 11;
pub const xlfStdev: u32 = 12;
pub const xlfDollar: u32 = 13;
pub const xlfFixed: u32 = 14;
pub const xlfSin: u32 = 15;
pub const xlfCos: u32 = 16;
pub const xlfTan: u32 = 17;
pub const xlfAtan: u32 = 18;
pub const xlfPi: u32 = 19;
pub const xlfSqrt: u32 = 20;
pub const xlfExp: u32 = 21;
pub const xlfLn: u32 = 22;
pub const xlfLog10: u32 = 23;
pub const xlfAbs: u32 = 24;
pub const xlfInt: u32 = 25;
pub const xlfSign: u32 = 26;
pub const xlfRound: u32 = 27;
pub const xlfLookup: u32 = 28;
pub const xlfIndex: u32 = 29;
pub const xlfRept: u32 = 30;
pub const xlfMid: u32 = 31;
pub const xlfLen: u32 = 32;
pub const xlfValue: u32 = 33;
pub const xlfTrue: u32 = 34;
pub const xlfFalse: u32 = 35;
pub const xlfAnd: u32 = 36;
pub const xlfOr: u32 = 37;
pub const xlfNot: u32 = 38;
pub const xlfMod: u32 = 39;
pub const xlfDcount: u32 = 40;
pub const xlfDsum: u32 = 41;
pub const xlfDaverage: u32 = 42;
pub const xlfDmin: u32 = 43;
pub const xlfDmax: u32 = 44;
pub const xlfDstdev: u32 = 45;
pub const xlfVar: u32 = 46;
pub const xlfDvar: u32 = 47;
pub const xlfText: u32 = 48;
pub const xlfLinest: u32 = 49;
pub const xlfTrend: u32 = 50;
pub const xlfLogest: u32 = 51;
pub const xlfGrowth: u32 = 52;
pub const xlfGoto: u32 = 53;
pub const xlfHalt: u32 = 54;
pub const xlfPv: u32 = 56;
pub const xlfFv: u32 = 57;
pub const xlfNper: u32 = 58;
pub const xlfPmt: u32 = 59;
pub const xlfRate: u32 = 60;
pub const xlfMirr: u32 = 61;
pub const xlfIrr: u32 = 62;
pub const xlfRand: u32 = 63;
pub const xlfMatch: u32 = 64;
pub const xlfDate: u32 = 65;
pub const xlfTime: u32 = 66;
pub const xlfDay: u32 = 67;
pub const xlfMonth: u32 = 68;
pub const xlfYear: u32 = 69;
pub const xlfWeekday: u32 = 70;
pub const xlfHour: u32 = 71;
pub const xlfMinute: u32 = 72;
pub const xlfSecond: u32 = 73;
pub const xlfNow: u32 = 74;
pub const xlfAreas: u32 = 75;
pub const xlfRows: u32 = 76;
pub const xlfColumns: u32 = 77;
pub const xlfOffset: u32 = 78;
pub const xlfAbsref: u32 = 79;
pub const xlfRelref: u32 = 80;
pub const xlfArgument: u32 = 81;
pub const xlfSearch: u32 = 82;
pub const xlfTranspose: u32 = 83;
pub const xlfError: u32 = 84;
pub const xlfStep: u32 = 85;
pub const xlfType: u32 = 86;
pub const xlfEcho: u32 = 87;
pub const xlfSetName: u32 = 88;
pub const xlfCaller: u32 = 89;
pub const xlfDeref: u32 = 90;
pub const xlfWindows: u32 = 91;
pub const xlfSeries: u32 = 92;
pub const xlfDocuments: u32 = 93;
pub const xlfActiveCell: u32 = 94;
pub const xlfSelection: u32 = 95;
pub const xlfResult: u32 = 96;
pub const xlfAtan2: u32 = 97;
pub const xlfAsin: u32 = 98;
pub const xlfAcos: u32 = 99;
pub const xlfChoose: u32 = 100;
pub const xlfHlookup: u32 = 101;
pub const xlfVlookup: u32 = 102;
pub const xlfLinks: u32 = 103;
pub const xlfInput: u32 = 104;
pub const xlfIsref: u32 = 105;
pub const xlfGetFormula: u32 = 106;
pub const xlfGetName: u32 = 107;
pub const xlfSetValue: u32 = 108;
pub const xlfLog: u32 = 109;
pub const xlfExec: u32 = 110;
pub const xlfChar: u32 = 111;
pub const xlfLower: u32 = 112;
pub const xlfUpper: u32 = 113;
pub const xlfProper: u32 = 114;
pub const xlfLeft: u32 = 115;
pub const xlfRight: u32 = 116;
pub const xlfExact: u32 = 117;
pub const xlfTrim: u32 = 118;
pub const xlfReplace: u32 = 119;
pub const xlfSubstitute: u32 = 120;
pub const xlfCode: u32 = 121;
pub const xlfNames: u32 = 122;
pub const xlfDirectory: u32 = 123;
pub const xlfFind: u32 = 124;
pub const xlfCell: u32 = 125;
pub const xlfIserr: u32 = 126;
pub const xlfIstext: u32 = 127;
pub const xlfIsnumber: u32 = 128;
pub const xlfIsblank: u32 = 129;
pub const xlfT: u32 = 130;
pub const xlfN: u32 = 131;
pub const xlfFopen: u32 = 132;
pub const xlfFclose: u32 = 133;
pub const xlfFsize: u32 = 134;
pub const xlfFreadln: u32 = 135;
pub const xlfFread: u32 = 136;
pub const xlfFwriteln: u32 = 137;
pub const xlfFwrite: u32 = 138;
pub const xlfFpos: u32 = 139;
pub const xlfDatevalue: u32 = 140;
pub const xlfTimevalue: u32 = 141;
pub const xlfSln: u32 = 142;
pub const xlfSyd: u32 = 143;
pub const xlfDdb: u32 = 144;
pub const xlfGetDef: u32 = 145;
pub const xlfReftext: u32 = 146;
pub const xlfTextref: u32 = 147;
pub const xlfIndirect: u32 = 148;
pub const xlfRegister: u32 = 149;
pub const xlfCall: u32 = 150;
pub const xlfAddBar: u32 = 151;
pub const xlfAddMenu: u32 = 152;
pub const xlfAddCommand: u32 = 153;
pub const xlfEnableCommand: u32 = 154;
pub const xlfCheckCommand: u32 = 155;
pub const xlfRenameCommand: u32 = 156;
pub const xlfShowBar: u32 = 157;
pub const xlfDeleteMenu: u32 = 158;
pub const xlfDeleteCommand: u32 = 159;
pub const xlfGetChartItem: u32 = 160;
pub const xlfDialogBox: u32 = 161;
pub const xlfClean: u32 = 162;
pub const xlfMdeterm: u32 = 163;
pub const xlfMinverse: u32 = 164;
pub const xlfMmult: u32 = 165;
pub const xlfFiles: u32 = 166;
pub const xlfIpmt: u32 = 167;
pub const xlfPpmt: u32 = 168;
pub const xlfCounta: u32 = 169;
pub const xlfCancelKey: u32 = 170;
pub const xlfInitiate: u32 = 175;
pub const xlfRequest: u32 = 176;
pub const xlfPoke: u32 = 177;
pub const xlfExecute: u32 = 178;
pub const xlfTerminate: u32 = 179;
pub const xlfRestart: u32 = 180;
pub const xlfHelp: u32 = 181;
pub const xlfGetBar: u32 = 182;
pub const xlfProduct: u32 = 183;
pub const xlfFact: u32 = 184;
pub const xlfGetCell: u32 = 185;
pub const xlfGetWorkspace: u32 = 186;
pub const xlfGetWindow: u32 = 187;
pub const xlfGetDocument: u32 = 188;
pub const xlfDproduct: u32 = 189;
pub const xlfIsnontext: u32 = 190;
pub const xlfGetNote: u32 = 191;
pub const xlfNote: u32 = 192;
pub const xlfStdevp: u32 = 193;
pub const xlfVarp: u32 = 194;
pub const xlfDstdevp: u32 = 195;
pub const xlfDvarp: u32 = 196;
pub const xlfTrunc: u32 = 197;
pub const xlfIslogical: u32 = 198;
pub const xlfDcounta: u32 = 199;
pub const xlfDeleteBar: u32 = 200;
pub const xlfUnregister: u32 = 201;
pub const xlfUsdollar: u32 = 204;
pub const xlfFindb: u32 = 205;
pub const xlfSearchb: u32 = 206;
pub const xlfReplaceb: u32 = 207;
pub const xlfLeftb: u32 = 208;
pub const xlfRightb: u32 = 209;
pub const xlfMidb: u32 = 210;
pub const xlfLenb: u32 = 211;
pub const xlfRoundup: u32 = 212;
pub const xlfRounddown: u32 = 213;
pub const xlfAsc: u32 = 214;
pub const xlfDbcs: u32 = 215;
pub const xlfRank: u32 = 216;
pub const xlfAddress: u32 = 219;
pub const xlfDays360: u32 = 220;
pub const xlfToday: u32 = 221;
pub const xlfVdb: u32 = 222;
pub const xlfMedian: u32 = 227;
pub const xlfSumproduct: u32 = 228;
pub const xlfSinh: u32 = 229;
pub const xlfCosh: u32 = 230;
pub const xlfTanh: u32 = 231;
pub const xlfAsinh: u32 = 232;
pub const xlfAcosh: u32 = 233;
pub const xlfAtanh: u32 = 234;
pub const xlfDget: u32 = 235;
pub const xlfCreateObject: u32 = 236;
pub const xlfVolatile: u32 = 237;
pub const xlfLastError: u32 = 238;
pub const xlfCustomUndo: u32 = 239;
pub const xlfCustomRepeat: u32 = 240;
pub const xlfFormulaConvert: u32 = 241;
pub const xlfGetLinkInfo: u32 = 242;
pub const xlfTextBox: u32 = 243;
pub const xlfInfo: u32 = 244;
pub const xlfGroup: u32 = 245;
pub const xlfGetObject: u32 = 246;
pub const xlfDb: u32 = 247;
pub const xlfPause: u32 = 248;
pub const xlfResume: u32 = 251;
pub const xlfFrequency: u32 = 252;
pub const xlfAddToolbar: u32 = 253;
pub const xlfDeleteToolbar: u32 = 254;
pub const xlfResetToolbar: u32 = 256;
pub const xlfEvaluate: u32 = 257;
pub const xlfGetToolbar: u32 = 258;
pub const xlfGetTool: u32 = 259;
pub const xlfSpellingCheck: u32 = 260;
pub const xlfErrorType: u32 = 261;
pub const xlfAppTitle: u32 = 262;
pub const xlfWindowTitle: u32 = 263;
pub const xlfSaveToolbar: u32 = 264;
pub const xlfEnableTool: u32 = 265;
pub const xlfPressTool: u32 = 266;
pub const xlfRegisterId: u32 = 267;
pub const xlfGetWorkbook: u32 = 268;
pub const xlfAvedev: u32 = 269;
pub const xlfBetadist: u32 = 270;
pub const xlfGammaln: u32 = 271;
pub const xlfBetainv: u32 = 272;
pub const xlfBinomdist: u32 = 273;
pub const xlfChidist: u32 = 274;
pub const xlfChiinv: u32 = 275;
pub const xlfCombin: u32 = 276;
pub const xlfConfidence: u32 = 277;
pub const xlfCritbinom: u32 = 278;
pub const xlfEven: u32 = 279;
pub const xlfExpondist: u32 = 280;
pub const xlfFdist: u32 = 281;
pub const xlfFinv: u32 = 282;
pub const xlfFisher: u32 = 283;
pub const xlfFisherinv: u32 = 284;
pub const xlfFloor: u32 = 285;
pub const xlfGammadist: u32 = 286;
pub const xlfGammainv: u32 = 287;
pub const xlfCeiling: u32 = 288;
pub const xlfHypgeomdist: u32 = 289;
pub const xlfLognormdist: u32 = 290;
pub const xlfLoginv: u32 = 291;
pub const xlfNegbinomdist: u32 = 292;
pub const xlfNormdist: u32 = 293;
pub const xlfNormsdist: u32 = 294;
pub const xlfNorminv: u32 = 295;
pub const xlfNormsinv: u32 = 296;
pub const xlfStandardize: u32 = 297;
pub const xlfOdd: u32 = 298;
pub const xlfPermut: u32 = 299;
pub const xlfPoisson: u32 = 300;
pub const xlfTdist: u32 = 301;
pub const xlfWeibull: u32 = 302;
pub const xlfSumxmy2: u32 = 303;
pub const xlfSumx2my2: u32 = 304;
pub const xlfSumx2py2: u32 = 305;
pub const xlfChitest: u32 = 306;
pub const xlfCorrel: u32 = 307;
pub const xlfCovar: u32 = 308;
pub const xlfForecast: u32 = 309;
pub const xlfFtest: u32 = 310;
pub const xlfIntercept: u32 = 311;
pub const xlfPearson: u32 = 312;
pub const xlfRsq: u32 = 313;
pub const xlfSteyx: u32 = 314;
pub const xlfSlope: u32 = 315;
pub const xlfTtest: u32 = 316;
pub const xlfProb: u32 = 317;
pub const xlfDevsq: u32 = 318;
pub const xlfGeomean: u32 = 319;
pub const xlfHarmean: u32 = 320;
pub const xlfSumsq: u32 = 321;
pub const xlfKurt: u32 = 322;
pub const xlfSkew: u32 = 323;
pub const xlfZtest: u32 = 324;
pub const xlfLarge: u32 = 325;
pub const xlfSmall: u32 = 326;
pub const xlfQuartile: u32 = 327;
pub const xlfPercentile: u32 = 328;
pub const xlfPercentrank: u32 = 329;
pub const xlfMode: u32 = 330;
pub const xlfTrimmean: u32 = 331;
pub const xlfTinv: u32 = 332;
pub const xlfMovieCommand: u32 = 334;
pub const xlfGetMovie: u32 = 335;
pub const xlfConcatenate: u32 = 336;
pub const xlfPower: u32 = 337;
pub const xlfPivotAddData: u32 = 338;
pub const xlfGetPivotTable: u32 = 339;
pub const xlfGetPivotField: u32 = 340;
pub const xlfGetPivotItem: u32 = 341;
pub const xlfRadians: u32 = 342;
pub const xlfDegrees: u32 = 343;
pub const xlfSubtotal: u32 = 344;
pub const xlfSumif: u32 = 345;
pub const xlfCountif: u32 = 346;
pub const xlfCountblank: u32 = 347;
pub const xlfScenarioGet: u32 = 348;
pub const xlfOptionsListsGet: u32 = 349;
pub const xlfIspmt: u32 = 350;
pub const xlfDatedif: u32 = 351;
pub const xlfDatestring: u32 = 352;
pub const xlfNumberstring: u32 = 353;
pub const xlfRoman: u32 = 354;
pub const xlfOpenDialog: u32 = 355;
pub const xlfSaveDialog: u32 = 356;
pub const xlfViewGet: u32 = 357;
pub const xlfGetpivotdata: u32 = 358;
pub const xlfHyperlink: u32 = 359;
pub const xlfPhonetic: u32 = 360;
pub const xlfAveragea: u32 = 361;
pub const xlfMaxa: u32 = 362;
pub const xlfMina: u32 = 363;
pub const xlfStdevpa: u32 = 364;
pub const xlfVarpa: u32 = 365;
pub const xlfStdeva: u32 = 366;
pub const xlfVara: u32 = 367;
pub const xlfBahttext: u32 = 368;
pub const xlfThaidayofweek: u32 = 369;
pub const xlfThaidigit: u32 = 370;
pub const xlfThaimonthofyear: u32 = 371;
pub const xlfThainumsound: u32 = 372;
pub const xlfThainumstring: u32 = 373;
pub const xlfThaistringlength: u32 = 374;
pub const xlfIsthaidigit: u32 = 375;
pub const xlfRoundbahtdown: u32 = 376;
pub const xlfRoundbahtup: u32 = 377;
pub const xlfThaiyear: u32 = 378;
pub const xlfRtd: u32 = 379;
pub const xlfCubevalue: u32 = 380;
pub const xlfCubemember: u32 = 381;
pub const xlfCubememberproperty: u32 = 382;
pub const xlfCuberankedmember: u32 = 383;
pub const xlfHex2bin: u32 = 384;
pub const xlfHex2dec: u32 = 385;
pub const xlfHex2oct: u32 = 386;
pub const xlfDec2bin: u32 = 387;
pub const xlfDec2hex: u32 = 388;
pub const xlfDec2oct: u32 = 389;
pub const xlfOct2bin: u32 = 390;
pub const xlfOct2hex: u32 = 391;
pub const xlfOct2dec: u32 = 392;
pub const xlfBin2dec: u32 = 393;
pub const xlfBin2oct: u32 = 394;
pub const xlfBin2hex: u32 = 395;
pub const xlfImsub: u32 = 396;
pub const xlfImdiv: u32 = 397;
pub const xlfImpower: u32 = 398;
pub const xlfImabs: u32 = 399;
pub const xlfImsqrt: u32 = 400;
pub const xlfImln: u32 = 401;
pub const xlfImlog2: u32 = 402;
pub const xlfImlog10: u32 = 403;
pub const xlfImsin: u32 = 404;
pub const xlfImcos: u32 = 405;
pub const xlfImexp: u32 = 406;
pub const xlfImargument: u32 = 407;
pub const xlfImconjugate: u32 = 408;
pub const xlfImaginary: u32 = 409;
pub const xlfImreal: u32 = 410;
pub const xlfComplex: u32 = 411;
pub const xlfImsum: u32 = 412;
pub const xlfImproduct: u32 = 413;
pub const xlfSeriessum: u32 = 414;
pub const xlfFactdouble: u32 = 415;
pub const xlfSqrtpi: u32 = 416;
pub const xlfQuotient: u32 = 417;
pub const xlfDelta: u32 = 418;
pub const xlfGestep: u32 = 419;
pub const xlfIseven: u32 = 420;
pub const xlfIsodd: u32 = 421;
pub const xlfMround: u32 = 422;
pub const xlfErf: u32 = 423;
pub const xlfErfc: u32 = 424;
pub const xlfBesselj: u32 = 425;
pub const xlfBesselk: u32 = 426;
pub const xlfBessely: u32 = 427;
pub const xlfBesseli: u32 = 428;
pub const xlfXirr: u32 = 429;
pub const xlfXnpv: u32 = 430;
pub const xlfPricemat: u32 = 431;
pub const xlfYieldmat: u32 = 432;
pub const xlfIntrate: u32 = 433;
pub const xlfReceived: u32 = 434;
pub const xlfDisc: u32 = 435;
pub const xlfPricedisc: u32 = 436;
pub const xlfYielddisc: u32 = 437;
pub const xlfTbilleq: u32 = 438;
pub const xlfTbillprice: u32 = 439;
pub const xlfTbillyield: u32 = 440;
pub const xlfPrice: u32 = 441;
pub const xlfYield: u32 = 442;
pub const xlfDollarde: u32 = 443;
pub const xlfDollarfr: u32 = 444;
pub const xlfNominal: u32 = 445;
pub const xlfEffect: u32 = 446;
pub const xlfCumprinc: u32 = 447;
pub const xlfCumipmt: u32 = 448;
pub const xlfEdate: u32 = 449;
pub const xlfEomonth: u32 = 450;
pub const xlfYearfrac: u32 = 451;
pub const xlfCoupdaybs: u32 = 452;
pub const xlfCoupdays: u32 = 453;
pub const xlfCoupdaysnc: u32 = 454;
pub const xlfCoupncd: u32 = 455;
pub const xlfCoupnum: u32 = 456;
pub const xlfCouppcd: u32 = 457;
pub const xlfDuration: u32 = 458;
pub const xlfMduration: u32 = 459;
pub const xlfOddlprice: u32 = 460;
pub const xlfOddlyield: u32 = 461;
pub const xlfOddfprice: u32 = 462;
pub const xlfOddfyield: u32 = 463;
pub const xlfRandbetween: u32 = 464;
pub const xlfWeeknum: u32 = 465;
pub const xlfAmordegrc: u32 = 466;
pub const xlfAmorlinc: u32 = 467;
pub const xlfConvert: u32 = 468;
pub const xlfAccrint: u32 = 469;
pub const xlfAccrintm: u32 = 470;
pub const xlfWorkday: u32 = 471;
pub const xlfNetworkdays: u32 = 472;
pub const xlfGcd: u32 = 473;
pub const xlfMultinomial: u32 = 474;
pub const xlfLcm: u32 = 475;
pub const xlfFvschedule: u32 = 476;
pub const xlfCubekpimember: u32 = 477;
pub const xlfCubeset: u32 = 478;
pub const xlfCubesetcount: u32 = 479;
pub const xlfIferror: u32 = 480;
pub const xlfCountifs: u32 = 481;
pub const xlfSumifs: u32 = 482;
pub const xlfAverageif: u32 = 483;
pub const xlfAverageifs: u32 = 484;
pub const xlfAggregate: u32 = 485;
pub const xlfBinom_dist: u32 = 486;
pub const xlfBinom_inv: u32 = 487;
pub const xlfConfidence_norm: u32 = 488;
pub const xlfConfidence_t: u32 = 489;
pub const xlfChisq_test: u32 = 490;
pub const xlfF_test: u32 = 491;
pub const xlfCovariance_p: u32 = 492;
pub const xlfCovariance_s: u32 = 493;
pub const xlfExpon_dist: u32 = 494;
pub const xlfGamma_dist: u32 = 495;
pub const xlfGamma_inv: u32 = 496;
pub const xlfMode_mult: u32 = 497;
pub const xlfMode_sngl: u32 = 498;
pub const xlfNorm_dist: u32 = 499;
pub const xlfNorm_inv: u32 = 500;
pub const xlfPercentile_exc: u32 = 501;
pub const xlfPercentile_inc: u32 = 502;
pub const xlfPercentrank_exc: u32 = 503;
pub const xlfPercentrank_inc: u32 = 504;
pub const xlfPoisson_dist: u32 = 505;
pub const xlfQuartile_exc: u32 = 506;
pub const xlfQuartile_inc: u32 = 507;
pub const xlfRank_avg: u32 = 508;
pub const xlfRank_eq: u32 = 509;
pub const xlfStdev_s: u32 = 510;
pub const xlfStdev_p: u32 = 511;
pub const xlfT_dist: u32 = 512;
pub const xlfT_dist_2t: u32 = 513;
pub const xlfT_dist_rt: u32 = 514;
pub const xlfT_inv: u32 = 515;
pub const xlfT_inv_2t: u32 = 516;
pub const xlfVar_s: u32 = 517;
pub const xlfVar_p: u32 = 518;
pub const xlfWeibull_dist: u32 = 519;
pub const xlfNetworkdays_intl: u32 = 520;
pub const xlfWorkday_intl: u32 = 521;
pub const xlfEcma_ceiling: u32 = 522;
pub const xlfIso_ceiling: u32 = 523;
pub const xlfBeta_dist: u32 = 525;
pub const xlfBeta_inv: u32 = 526;
pub const xlfChisq_dist: u32 = 527;
pub const xlfChisq_dist_rt: u32 = 528;
pub const xlfChisq_inv: u32 = 529;
pub const xlfChisq_inv_rt: u32 = 530;
pub const xlfF_dist: u32 = 531;
pub const xlfF_dist_rt: u32 = 532;
pub const xlfF_inv: u32 = 533;
pub const xlfF_inv_rt: u32 = 534;
pub const xlfHypgeom_dist: u32 = 535;
pub const xlfLognorm_dist: u32 = 536;
pub const xlfLognorm_inv: u32 = 537;
pub const xlfNegbinom_dist: u32 = 538;
pub const xlfNorm_s_dist: u32 = 539;
pub const xlfNorm_s_inv: u32 = 540;
pub const xlfT_test: u32 = 541;
pub const xlfZ_test: u32 = 542;
pub const xlcBeep: u32 = 32768;
pub const xlcOpen: u32 = 32769;
pub const xlcOpenLinks: u32 = 32770;
pub const xlcCloseAll: u32 = 32771;
pub const xlcSave: u32 = 32772;
pub const xlcSaveAs: u32 = 32773;
pub const xlcFileDelete: u32 = 32774;
pub const xlcPageSetup: u32 = 32775;
pub const xlcPrint: u32 = 32776;
pub const xlcPrinterSetup: u32 = 32777;
pub const xlcQuit: u32 = 32778;
pub const xlcNewWindow: u32 = 32779;
pub const xlcArrangeAll: u32 = 32780;
pub const xlcWindowSize: u32 = 32781;
pub const xlcWindowMove: u32 = 32782;
pub const xlcFull: u32 = 32783;
pub const xlcClose: u32 = 32784;
pub const xlcRun: u32 = 32785;
pub const xlcSetPrintArea: u32 = 32790;
pub const xlcSetPrintTitles: u32 = 32791;
pub const xlcSetPageBreak: u32 = 32792;
pub const xlcRemovePageBreak: u32 = 32793;
pub const xlcFont: u32 = 32794;
pub const xlcDisplay: u32 = 32795;
pub const xlcProtectDocument: u32 = 32796;
pub const xlcPrecision: u32 = 32797;
pub const xlcA1R1c1: u32 = 32798;
pub const xlcCalculateNow: u32 = 32799;
pub const xlcCalculation: u32 = 32800;
pub const xlcDataFind: u32 = 32802;
pub const xlcExtract: u32 = 32803;
pub const xlcDataDelete: u32 = 32804;
pub const xlcSetDatabase: u32 = 32805;
pub const xlcSetCriteria: u32 = 32806;
pub const xlcSort: u32 = 32807;
pub const xlcDataSeries: u32 = 32808;
pub const xlcTable: u32 = 32809;
pub const xlcFormatNumber: u32 = 32810;
pub const xlcAlignment: u32 = 32811;
pub const xlcStyle: u32 = 32812;
pub const xlcBorder: u32 = 32813;
pub const xlcCellProtection: u32 = 32814;
pub const xlcColumnWidth: u32 = 32815;
pub const xlcUndo: u32 = 32816;
pub const xlcCut: u32 = 32817;
pub const xlcCopy: u32 = 32818;
pub const xlcPaste: u32 = 32819;
pub const xlcClear: u32 = 32820;
pub const xlcPasteSpecial: u32 = 32821;
pub const xlcEditDelete: u32 = 32822;
pub const xlcInsert: u32 = 32823;
pub const xlcFillRight: u32 = 32824;
pub const xlcFillDown: u32 = 32825;
pub const xlcDefineName: u32 = 32829;
pub const xlcCreateNames: u32 = 32830;
pub const xlcFormulaGoto: u32 = 32831;
pub const xlcFormulaFind: u32 = 32832;
pub const xlcSelectLastCell: u32 = 32833;
pub const xlcShowActiveCell: u32 = 32834;
pub const xlcGalleryArea: u32 = 32835;
pub const xlcGalleryBar: u32 = 32836;
pub const xlcGalleryColumn: u32 = 32837;
pub const xlcGalleryLine: u32 = 32838;
pub const xlcGalleryPie: u32 = 32839;
pub const xlcGalleryScatter: u32 = 32840;
pub const xlcCombination: u32 = 32841;
pub const xlcPreferred: u32 = 32842;
pub const xlcAddOverlay: u32 = 32843;
pub const xlcGridlines: u32 = 32844;
pub const xlcSetPreferred: u32 = 32845;
pub const xlcAxes: u32 = 32846;
pub const xlcLegend: u32 = 32847;
pub const xlcAttachText: u32 = 32848;
pub const xlcAddArrow: u32 = 32849;
pub const xlcSelectChart: u32 = 32850;
pub const xlcSelectPlotArea: u32 = 32851;
pub const xlcPatterns: u32 = 32852;
pub const xlcMainChart: u32 = 32853;
pub const xlcOverlay: u32 = 32854;
pub const xlcScale: u32 = 32855;
pub const xlcFormatLegend: u32 = 32856;
pub const xlcFormatText: u32 = 32857;
pub const xlcEditRepeat: u32 = 32858;
pub const xlcParse: u32 = 32859;
pub const xlcJustify: u32 = 32860;
pub const xlcHide: u32 = 32861;
pub const xlcUnhide: u32 = 32862;
pub const xlcWorkspace: u32 = 32863;
pub const xlcFormula: u32 = 32864;
pub const xlcFormulaFill: u32 = 32865;
pub const xlcFormulaArray: u32 = 32866;
pub const xlcDataFindNext: u32 = 32867;
pub const xlcDataFindPrev: u32 = 32868;
pub const xlcFormulaFindNext: u32 = 32869;
pub const xlcFormulaFindPrev: u32 = 32870;
pub const xlcActivate: u32 = 32871;
pub const xlcActivateNext: u32 = 32872;
pub const xlcActivatePrev: u32 = 32873;
pub const xlcUnlockedNext: u32 = 32874;
pub const xlcUnlockedPrev: u32 = 32875;
pub const xlcCopyPicture: u32 = 32876;
pub const xlcSelect: u32 = 32877;
pub const xlcDeleteName: u32 = 32878;
pub const xlcDeleteFormat: u32 = 32879;
pub const xlcVline: u32 = 32880;
pub const xlcHline: u32 = 32881;
pub const xlcVpage: u32 = 32882;
pub const xlcHpage: u32 = 32883;
pub const xlcVscroll: u32 = 32884;
pub const xlcHscroll: u32 = 32885;
pub const xlcAlert: u32 = 32886;
pub const xlcNew: u32 = 32887;
pub const xlcCancelCopy: u32 = 32888;
pub const xlcShowClipboard: u32 = 32889;
pub const xlcMessage: u32 = 32890;
pub const xlcPasteLink: u32 = 32892;
pub const xlcAppActivate: u32 = 32893;
pub const xlcDeleteArrow: u32 = 32894;
pub const xlcRowHeight: u32 = 32895;
pub const xlcFormatMove: u32 = 32896;
pub const xlcFormatSize: u32 = 32897;
pub const xlcFormulaReplace: u32 = 32898;
pub const xlcSendKeys: u32 = 32899;
pub const xlcSelectSpecial: u32 = 32900;
pub const xlcApplyNames: u32 = 32901;
pub const xlcReplaceFont: u32 = 32902;
pub const xlcFreezePanes: u32 = 32903;
pub const xlcShowInfo: u32 = 32904;
pub const xlcSplit: u32 = 32905;
pub const xlcOnWindow: u32 = 32906;
pub const xlcOnData: u32 = 32907;
pub const xlcDisableInput: u32 = 32908;
pub const xlcEcho: u32 = 32909;
pub const xlcOutline: u32 = 32910;
pub const xlcListNames: u32 = 32911;
pub const xlcFileClose: u32 = 32912;
pub const xlcSaveWorkbook: u32 = 32913;
pub const xlcDataForm: u32 = 32914;
pub const xlcCopyChart: u32 = 32915;
pub const xlcOnTime: u32 = 32916;
pub const xlcWait: u32 = 32917;
pub const xlcFormatFont: u32 = 32918;
pub const xlcFillUp: u32 = 32919;
pub const xlcFillLeft: u32 = 32920;
pub const xlcDeleteOverlay: u32 = 32921;
pub const xlcNote: u32 = 32922;
pub const xlcShortMenus: u32 = 32923;
pub const xlcSetUpdateStatus: u32 = 32927;
pub const xlcColorPalette: u32 = 32929;
pub const xlcDeleteStyle: u32 = 32930;
pub const xlcWindowRestore: u32 = 32931;
pub const xlcWindowMaximize: u32 = 32932;
pub const xlcError: u32 = 32933;
pub const xlcChangeLink: u32 = 32934;
pub const xlcCalculateDocument: u32 = 32935;
pub const xlcOnKey: u32 = 32936;
pub const xlcAppRestore: u32 = 32937;
pub const xlcAppMove: u32 = 32938;
pub const xlcAppSize: u32 = 32939;
pub const xlcAppMinimize: u32 = 32940;
pub const xlcAppMaximize: u32 = 32941;
pub const xlcBringToFront: u32 = 32942;
pub const xlcSendToBack: u32 = 32943;
pub const xlcMainChartType: u32 = 32953;
pub const xlcOverlayChartType: u32 = 32954;
pub const xlcSelectEnd: u32 = 32955;
pub const xlcOpenMail: u32 = 32956;
pub const xlcSendMail: u32 = 32957;
pub const xlcStandardFont: u32 = 32958;
pub const xlcConsolidate: u32 = 32959;
pub const xlcSortSpecial: u32 = 32960;
pub const xlcGallery3dArea: u32 = 32961;
pub const xlcGallery3dColumn: u32 = 32962;
pub const xlcGallery3dLine: u32 = 32963;
pub const xlcGallery3dPie: u32 = 32964;
pub const xlcView3d: u32 = 32965;
pub const xlcGoalSeek: u32 = 32966;
pub const xlcWorkgroup: u32 = 32967;
pub const xlcFillGroup: u32 = 32968;
pub const xlcUpdateLink: u32 = 32969;
pub const xlcPromote: u32 = 32970;
pub const xlcDemote: u32 = 32971;
pub const xlcShowDetail: u32 = 32972;
pub const xlcUngroup: u32 = 32974;
pub const xlcObjectProperties: u32 = 32975;
pub const xlcSaveNewObject: u32 = 32976;
pub const xlcShare: u32 = 32977;
pub const xlcShareName: u32 = 32978;
pub const xlcDuplicate: u32 = 32979;
pub const xlcApplyStyle: u32 = 32980;
pub const xlcAssignToObject: u32 = 32981;
pub const xlcObjectProtection: u32 = 32982;
pub const xlcHideObject: u32 = 32983;
pub const xlcSetExtract: u32 = 32984;
pub const xlcCreatePublisher: u32 = 32985;
pub const xlcSubscribeTo: u32 = 32986;
pub const xlcAttributes: u32 = 32987;
pub const xlcShowToolbar: u32 = 32988;
pub const xlcPrintPreview: u32 = 32990;
pub const xlcEditColor: u32 = 32991;
pub const xlcShowLevels: u32 = 32992;
pub const xlcFormatMain: u32 = 32993;
pub const xlcFormatOverlay: u32 = 32994;
pub const xlcOnRecalc: u32 = 32995;
pub const xlcEditSeries: u32 = 32996;
pub const xlcDefineStyle: u32 = 32997;
pub const xlcLinePrint: u32 = 33008;
pub const xlcEnterData: u32 = 33011;
pub const xlcGalleryRadar: u32 = 33017;
pub const xlcMergeStyles: u32 = 33018;
pub const xlcEditionOptions: u32 = 33019;
pub const xlcPastePicture: u32 = 33020;
pub const xlcPastePictureLink: u32 = 33021;
pub const xlcSpelling: u32 = 33022;
pub const xlcZoom: u32 = 33024;
pub const xlcResume: u32 = 33026;
pub const xlcInsertObject: u32 = 33027;
pub const xlcWindowMinimize: u32 = 33028;
pub const xlcSize: u32 = 33029;
pub const xlcMove: u32 = 33030;
pub const xlcSoundNote: u32 = 33033;
pub const xlcSoundPlay: u32 = 33034;
pub const xlcFormatShape: u32 = 33035;
pub const xlcExtendPolygon: u32 = 33036;
pub const xlcFormatAuto: u32 = 33037;
pub const xlcGallery3dBar: u32 = 33040;
pub const xlcGallery3dSurface: u32 = 33041;
pub const xlcFillAuto: u32 = 33042;
pub const xlcCustomizeToolbar: u32 = 33044;
pub const xlcAddTool: u32 = 33045;
pub const xlcEditObject: u32 = 33046;
pub const xlcOnDoubleclick: u32 = 33047;
pub const xlcOnEntry: u32 = 33048;
pub const xlcWorkbookAdd: u32 = 33049;
pub const xlcWorkbookMove: u32 = 33050;
pub const xlcWorkbookCopy: u32 = 33051;
pub const xlcWorkbookOptions: u32 = 33052;
pub const xlcSaveWorkspace: u32 = 33053;
pub const xlcChartWizard: u32 = 33056;
pub const xlcDeleteTool: u32 = 33057;
pub const xlcMoveTool: u32 = 33058;
pub const xlcWorkbookSelect: u32 = 33059;
pub const xlcWorkbookActivate: u32 = 33060;
pub const xlcAssignToTool: u32 = 33061;
pub const xlcCopyTool: u32 = 33063;
pub const xlcResetTool: u32 = 33064;
pub const xlcConstrainNumeric: u32 = 33065;
pub const xlcPasteTool: u32 = 33066;
pub const xlcPlacement: u32 = 33068;
pub const xlcFillWorkgroup: u32 = 33069;
pub const xlcWorkbookNew: u32 = 33070;
pub const xlcScenarioCells: u32 = 33073;
pub const xlcScenarioDelete: u32 = 33074;
pub const xlcScenarioAdd: u32 = 33075;
pub const xlcScenarioEdit: u32 = 33076;
pub const xlcScenarioShow: u32 = 33077;
pub const xlcScenarioShowNext: u32 = 33078;
pub const xlcScenarioSummary: u32 = 33079;
pub const xlcPivotTableWizard: u32 = 33080;
pub const xlcPivotFieldProperties: u32 = 33081;
pub const xlcPivotField: u32 = 33082;
pub const xlcPivotItem: u32 = 33083;
pub const xlcPivotAddFields: u32 = 33084;
pub const xlcOptionsCalculation: u32 = 33086;
pub const xlcOptionsEdit: u32 = 33087;
pub const xlcOptionsView: u32 = 33088;
pub const xlcAddinManager: u32 = 33089;
pub const xlcMenuEditor: u32 = 33090;
pub const xlcAttachToolbars: u32 = 33091;
pub const xlcVbaactivate: u32 = 33092;
pub const xlcOptionsChart: u32 = 33093;
pub const xlcVbaInsertFile: u32 = 33096;
pub const xlcVbaProcedureDefinition: u32 = 33098;
pub const xlcRoutingSlip: u32 = 33104;
pub const xlcRouteDocument: u32 = 33106;
pub const xlcMailLogon: u32 = 33107;
pub const xlcInsertPicture: u32 = 33110;
pub const xlcEditTool: u32 = 33111;
pub const xlcGalleryDoughnut: u32 = 33112;
pub const xlcChartTrend: u32 = 33118;
pub const xlcPivotItemProperties: u32 = 33120;
pub const xlcWorkbookInsert: u32 = 33122;
pub const xlcOptionsTransition: u32 = 33123;
pub const xlcOptionsGeneral: u32 = 33124;
pub const xlcFilterAdvanced: u32 = 33138;
pub const xlcMailAddMailer: u32 = 33141;
pub const xlcMailDeleteMailer: u32 = 33142;
pub const xlcMailReply: u32 = 33143;
pub const xlcMailReplyAll: u32 = 33144;
pub const xlcMailForward: u32 = 33145;
pub const xlcMailNextLetter: u32 = 33146;
pub const xlcDataLabel: u32 = 33147;
pub const xlcInsertTitle: u32 = 33148;
pub const xlcFontProperties: u32 = 33149;
pub const xlcMacroOptions: u32 = 33150;
pub const xlcWorkbookHide: u32 = 33151;
pub const xlcWorkbookUnhide: u32 = 33152;
pub const xlcWorkbookDelete: u32 = 33153;
pub const xlcWorkbookName: u32 = 33154;
pub const xlcGalleryCustom: u32 = 33156;
pub const xlcAddChartAutoformat: u32 = 33158;
pub const xlcDeleteChartAutoformat: u32 = 33159;
pub const xlcChartAddData: u32 = 33160;
pub const xlcAutoOutline: u32 = 33161;
pub const xlcTabOrder: u32 = 33162;
pub const xlcShowDialog: u32 = 33163;
pub const xlcSelectAll: u32 = 33164;
pub const xlcUngroupSheets: u32 = 33165;
pub const xlcSubtotalCreate: u32 = 33166;
pub const xlcSubtotalRemove: u32 = 33167;
pub const xlcRenameObject: u32 = 33168;
pub const xlcWorkbookScroll: u32 = 33180;
pub const xlcWorkbookNext: u32 = 33181;
pub const xlcWorkbookPrev: u32 = 33182;
pub const xlcWorkbookTabSplit: u32 = 33183;
pub const xlcFullScreen: u32 = 33184;
pub const xlcWorkbookProtect: u32 = 33185;
pub const xlcScrollbarProperties: u32 = 33188;
pub const xlcPivotShowPages: u32 = 33189;
pub const xlcTextToColumns: u32 = 33190;
pub const xlcFormatCharttype: u32 = 33191;
pub const xlcLinkFormat: u32 = 33192;
pub const xlcTracerDisplay: u32 = 33193;
pub const xlcTracerNavigate: u32 = 33198;
pub const xlcTracerClear: u32 = 33199;
pub const xlcTracerError: u32 = 33200;
pub const xlcPivotFieldGroup: u32 = 33201;
pub const xlcPivotFieldUngroup: u32 = 33202;
pub const xlcCheckboxProperties: u32 = 33203;
pub const xlcLabelProperties: u32 = 33204;
pub const xlcListboxProperties: u32 = 33205;
pub const xlcEditboxProperties: u32 = 33206;
pub const xlcPivotRefresh: u32 = 33207;
pub const xlcLinkCombo: u32 = 33208;
pub const xlcOpenText: u32 = 33209;
pub const xlcHideDialog: u32 = 33210;
pub const xlcSetDialogFocus: u32 = 33211;
pub const xlcEnableObject: u32 = 33212;
pub const xlcPushbuttonProperties: u32 = 33213;
pub const xlcSetDialogDefault: u32 = 33214;
pub const xlcFilter: u32 = 33215;
pub const xlcFilterShowAll: u32 = 33216;
pub const xlcClearOutline: u32 = 33217;
pub const xlcFunctionWizard: u32 = 33218;
pub const xlcAddListItem: u32 = 33219;
pub const xlcSetListItem: u32 = 33220;
pub const xlcRemoveListItem: u32 = 33221;
pub const xlcSelectListItem: u32 = 33222;
pub const xlcSetControlValue: u32 = 33223;
pub const xlcSaveCopyAs: u32 = 33224;
pub const xlcOptionsListsAdd: u32 = 33226;
pub const xlcOptionsListsDelete: u32 = 33227;
pub const xlcSeriesAxes: u32 = 33228;
pub const xlcSeriesX: u32 = 33229;
pub const xlcSeriesY: u32 = 33230;
pub const xlcErrorbarX: u32 = 33231;
pub const xlcErrorbarY: u32 = 33232;
pub const xlcFormatChart: u32 = 33233;
pub const xlcSeriesOrder: u32 = 33234;
pub const xlcMailLogoff: u32 = 33235;
pub const xlcClearRoutingSlip: u32 = 33236;
pub const xlcAppActivateMicrosoft: u32 = 33237;
pub const xlcMailEditMailer: u32 = 33238;
pub const xlcOnSheet: u32 = 33239;
pub const xlcStandardWidth: u32 = 33240;
pub const xlcScenarioMerge: u32 = 33241;
pub const xlcSummaryInfo: u32 = 33242;
pub const xlcFindFile: u32 = 33243;
pub const xlcActiveCellFont: u32 = 33244;
pub const xlcEnableTipwizard: u32 = 33245;
pub const xlcVbaMakeAddin: u32 = 33246;
pub const xlcInsertdatatable: u32 = 33248;
pub const xlcWorkgroupOptions: u32 = 33249;
pub const xlcMailSendMailer: u32 = 33250;
pub const xlcAutocorrect: u32 = 33253;
pub const xlcPostDocument: u32 = 33257;
pub const xlcPicklist: u32 = 33259;
pub const xlcViewShow: u32 = 33261;
pub const xlcViewDefine: u32 = 33262;
pub const xlcViewDelete: u32 = 33263;
pub const xlcSheetBackground: u32 = 33277;
pub const xlcInsertMapObject: u32 = 33278;
pub const xlcOptionsMenono: u32 = 33279;
pub const xlcNormal: u32 = 33286;
pub const xlcLayout: u32 = 33287;
pub const xlcRmPrintArea: u32 = 33288;
pub const xlcClearPrintArea: u32 = 33289;
pub const xlcAddPrintArea: u32 = 33290;
pub const xlcMoveBrk: u32 = 33291;
pub const xlcHidecurrNote: u32 = 33313;
pub const xlcHideallNotes: u32 = 33314;
pub const xlcDeleteNote: u32 = 33315;
pub const xlcTraverseNotes: u32 = 33316;
pub const xlcActivateNotes: u32 = 33317;
pub const xlcProtectRevisions: u32 = 33388;
pub const xlcUnprotectRevisions: u32 = 33389;
pub const xlcOptionsMe: u32 = 33415;
pub const xlcWebPublish: u32 = 33421;
pub const xlcNewwebquery: u32 = 33435;
pub const xlcPivotTableChart: u32 = 33441;
pub const xlcOptionsSave: u32 = 33521;
pub const xlcOptionsSpell: u32 = 33523;
pub const xlcHideallInkannots: u32 = 33576;
pub type INT32 = ::std::os::raw::c_int;
pub type WCHAR = ::std::os::raw::c_ushort;
pub type BYTE = ::std::os::raw::c_uchar;
pub type WORD = ::std::os::raw::c_ushort;
pub type DWORD = ::std::os::raw::c_uint;
pub type LONG = ::std::os::raw::c_long;
pub type DWORD_PTR = *mut DWORD;
pub type LPSTR = *mut ::std::os::raw::c_char;
pub type VOID = ::std::os::raw::c_void;
pub type HANDLE = *mut ::std::os::raw::c_void;
pub type HWND = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagPOINT {
    pub x: *mut ::std::os::raw::c_void,
    pub y: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_tagPOINT() {
    assert_eq!(
        ::std::mem::size_of::<tagPOINT>(),
        16usize,
        concat!("Size of: ", stringify!(tagPOINT))
    );
    assert_eq!(
        ::std::mem::align_of::<tagPOINT>(),
        8usize,
        concat!("Alignment of ", stringify!(tagPOINT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagPOINT>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tagPOINT),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tagPOINT>())).y as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tagPOINT),
            "::",
            stringify!(y)
        )
    );
}
pub type POINT = tagPOINT;
pub type BOOL = INT32;
pub type XCHAR = WCHAR;
pub type RW = INT32;
pub type COL = INT32;
pub type IDSHEET = DWORD_PTR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xlref {
    pub rwFirst: WORD,
    pub rwLast: WORD,
    pub colFirst: BYTE,
    pub colLast: BYTE,
}
#[test]
fn bindgen_test_layout_xlref() {
    assert_eq!(
        ::std::mem::size_of::<xlref>(),
        6usize,
        concat!("Size of: ", stringify!(xlref))
    );
    assert_eq!(
        ::std::mem::align_of::<xlref>(),
        2usize,
        concat!("Alignment of ", stringify!(xlref))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xlref>())).rwFirst as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xlref),
            "::",
            stringify!(rwFirst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xlref>())).rwLast as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xlref),
            "::",
            stringify!(rwLast)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xlref>())).colFirst as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xlref),
            "::",
            stringify!(colFirst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xlref>())).colLast as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(xlref),
            "::",
            stringify!(colLast)
        )
    );
}
pub type XLREF = xlref;
pub type LPXLREF = *mut xlref;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xlmref {
    pub count: WORD,
    pub reftbl: [XLREF; 1usize],
}
#[test]
fn bindgen_test_layout_xlmref() {
    assert_eq!(
        ::std::mem::size_of::<xlmref>(),
        8usize,
        concat!("Size of: ", stringify!(xlmref))
    );
    assert_eq!(
        ::std::mem::align_of::<xlmref>(),
        2usize,
        concat!("Alignment of ", stringify!(xlmref))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xlmref>())).count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xlmref),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xlmref>())).reftbl as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xlmref),
            "::",
            stringify!(reftbl)
        )
    );
}
pub type XLMREF = xlmref;
pub type LPXLMREF = *mut xlmref;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xlref12 {
    pub rwFirst: RW,
    pub rwLast: RW,
    pub colFirst: COL,
    pub colLast: COL,
}
#[test]
fn bindgen_test_layout_xlref12() {
    assert_eq!(
        ::std::mem::size_of::<xlref12>(),
        16usize,
        concat!("Size of: ", stringify!(xlref12))
    );
    assert_eq!(
        ::std::mem::align_of::<xlref12>(),
        4usize,
        concat!("Alignment of ", stringify!(xlref12))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xlref12>())).rwFirst as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xlref12),
            "::",
            stringify!(rwFirst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xlref12>())).rwLast as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xlref12),
            "::",
            stringify!(rwLast)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xlref12>())).colFirst as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xlref12),
            "::",
            stringify!(colFirst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xlref12>())).colLast as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xlref12),
            "::",
            stringify!(colLast)
        )
    );
}
pub type XLREF12 = xlref12;
pub type LPXLREF12 = *mut xlref12;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xlmref12 {
    pub count: WORD,
    pub reftbl: [XLREF12; 1usize],
}
#[test]
fn bindgen_test_layout_xlmref12() {
    assert_eq!(
        ::std::mem::size_of::<xlmref12>(),
        20usize,
        concat!("Size of: ", stringify!(xlmref12))
    );
    assert_eq!(
        ::std::mem::align_of::<xlmref12>(),
        4usize,
        concat!("Alignment of ", stringify!(xlmref12))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xlmref12>())).count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xlmref12),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xlmref12>())).reftbl as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xlmref12),
            "::",
            stringify!(reftbl)
        )
    );
}
pub type XLMREF12 = xlmref12;
pub type LPXLMREF12 = *mut xlmref12;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FP {
    pub rows: ::std::os::raw::c_ushort,
    pub columns: ::std::os::raw::c_ushort,
    pub array: [f64; 1usize],
}
#[test]
fn bindgen_test_layout__FP() {
    assert_eq!(
        ::std::mem::size_of::<_FP>(),
        16usize,
        concat!("Size of: ", stringify!(_FP))
    );
    assert_eq!(
        ::std::mem::align_of::<_FP>(),
        8usize,
        concat!("Alignment of ", stringify!(_FP))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FP>())).rows as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_FP), "::", stringify!(rows))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FP>())).columns as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_FP),
            "::",
            stringify!(columns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FP>())).array as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_FP),
            "::",
            stringify!(array)
        )
    );
}
pub type FP = _FP;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FP12 {
    pub rows: INT32,
    pub columns: INT32,
    pub array: [f64; 1usize],
}
#[test]
fn bindgen_test_layout__FP12() {
    assert_eq!(
        ::std::mem::size_of::<_FP12>(),
        16usize,
        concat!("Size of: ", stringify!(_FP12))
    );
    assert_eq!(
        ::std::mem::align_of::<_FP12>(),
        8usize,
        concat!("Alignment of ", stringify!(_FP12))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FP12>())).rows as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_FP12),
            "::",
            stringify!(rows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FP12>())).columns as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_FP12),
            "::",
            stringify!(columns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FP12>())).array as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_FP12),
            "::",
            stringify!(array)
        )
    );
}
pub type FP12 = _FP12;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xloper {
    pub val: xloper__bindgen_ty_1,
    pub xltype: WORD,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xloper__bindgen_ty_1 {
    pub num: f64,
    pub str: LPSTR,
    pub bool_: WORD,
    pub err: WORD,
    pub w: ::std::os::raw::c_short,
    pub sref: xloper__bindgen_ty_1__bindgen_ty_1,
    pub mref: xloper__bindgen_ty_1__bindgen_ty_2,
    pub array: xloper__bindgen_ty_1__bindgen_ty_3,
    pub flow: xloper__bindgen_ty_1__bindgen_ty_4,
    pub bigdata: xloper__bindgen_ty_1__bindgen_ty_5,
    _bindgen_union_align: [u64; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xloper__bindgen_ty_1__bindgen_ty_1 {
    pub count: WORD,
    pub ref_: XLREF,
}
#[test]
fn bindgen_test_layout_xloper__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xloper__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(xloper__bindgen_ty_1__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xloper__bindgen_ty_1__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(xloper__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xloper__bindgen_ty_1__bindgen_ty_1>())).count as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xloper__bindgen_ty_1__bindgen_ty_1>())).ref_ as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(ref_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xloper__bindgen_ty_1__bindgen_ty_2 {
    pub lpmref: *mut XLMREF,
    pub idSheet: IDSHEET,
}
#[test]
fn bindgen_test_layout_xloper__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<xloper__bindgen_ty_1__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(xloper__bindgen_ty_1__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<xloper__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xloper__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xloper__bindgen_ty_1__bindgen_ty_2>())).lpmref as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(lpmref)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xloper__bindgen_ty_1__bindgen_ty_2>())).idSheet as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(idSheet)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xloper__bindgen_ty_1__bindgen_ty_3 {
    pub lparray: *mut xloper,
    pub rows: WORD,
    pub columns: WORD,
}
#[test]
fn bindgen_test_layout_xloper__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<xloper__bindgen_ty_1__bindgen_ty_3>(),
        16usize,
        concat!("Size of: ", stringify!(xloper__bindgen_ty_1__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<xloper__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xloper__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xloper__bindgen_ty_1__bindgen_ty_3>())).lparray as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(lparray)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xloper__bindgen_ty_1__bindgen_ty_3>())).rows as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(rows)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xloper__bindgen_ty_1__bindgen_ty_3>())).columns as *const _
                as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(columns)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xloper__bindgen_ty_1__bindgen_ty_4 {
    pub valflow: xloper__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1,
    pub rw: WORD,
    pub col: BYTE,
    pub xlflow: BYTE,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xloper__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1 {
    pub level: ::std::os::raw::c_short,
    pub tbctrl: ::std::os::raw::c_short,
    pub idSheet: IDSHEET,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_xloper__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xloper__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(xloper__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xloper__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xloper__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xloper__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1>())).level
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1),
            "::",
            stringify!(level)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xloper__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1>())).tbctrl
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1),
            "::",
            stringify!(tbctrl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xloper__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1>())).idSheet
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1),
            "::",
            stringify!(idSheet)
        )
    );
}
#[test]
fn bindgen_test_layout_xloper__bindgen_ty_1__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<xloper__bindgen_ty_1__bindgen_ty_4>(),
        16usize,
        concat!("Size of: ", stringify!(xloper__bindgen_ty_1__bindgen_ty_4))
    );
    assert_eq!(
        ::std::mem::align_of::<xloper__bindgen_ty_1__bindgen_ty_4>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xloper__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xloper__bindgen_ty_1__bindgen_ty_4>())).valflow as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(valflow)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xloper__bindgen_ty_1__bindgen_ty_4>())).rw as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(rw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xloper__bindgen_ty_1__bindgen_ty_4>())).col as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(col)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xloper__bindgen_ty_1__bindgen_ty_4>())).xlflow as *const _
                as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(xlflow)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xloper__bindgen_ty_1__bindgen_ty_5 {
    pub h: xloper__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
    pub cbData: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xloper__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 {
    pub lpbData: *mut BYTE,
    pub hdata: HANDLE,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_xloper__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xloper__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(xloper__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xloper__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xloper__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xloper__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>())).lpbData
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1),
            "::",
            stringify!(lpbData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xloper__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>())).hdata
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1),
            "::",
            stringify!(hdata)
        )
    );
}
#[test]
fn bindgen_test_layout_xloper__bindgen_ty_1__bindgen_ty_5() {
    assert_eq!(
        ::std::mem::size_of::<xloper__bindgen_ty_1__bindgen_ty_5>(),
        16usize,
        concat!("Size of: ", stringify!(xloper__bindgen_ty_1__bindgen_ty_5))
    );
    assert_eq!(
        ::std::mem::align_of::<xloper__bindgen_ty_1__bindgen_ty_5>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xloper__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xloper__bindgen_ty_1__bindgen_ty_5>())).h as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xloper__bindgen_ty_1__bindgen_ty_5>())).cbData as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(cbData)
        )
    );
}
#[test]
fn bindgen_test_layout_xloper__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xloper__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(xloper__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xloper__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(xloper__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xloper__bindgen_ty_1>())).num as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper__bindgen_ty_1),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xloper__bindgen_ty_1>())).str as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper__bindgen_ty_1),
            "::",
            stringify!(str)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xloper__bindgen_ty_1>())).bool_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper__bindgen_ty_1),
            "::",
            stringify!(bool_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xloper__bindgen_ty_1>())).err as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper__bindgen_ty_1),
            "::",
            stringify!(err)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xloper__bindgen_ty_1>())).w as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper__bindgen_ty_1),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xloper__bindgen_ty_1>())).sref as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper__bindgen_ty_1),
            "::",
            stringify!(sref)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xloper__bindgen_ty_1>())).mref as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper__bindgen_ty_1),
            "::",
            stringify!(mref)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xloper__bindgen_ty_1>())).array as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper__bindgen_ty_1),
            "::",
            stringify!(array)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xloper__bindgen_ty_1>())).flow as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper__bindgen_ty_1),
            "::",
            stringify!(flow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xloper__bindgen_ty_1>())).bigdata as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper__bindgen_ty_1),
            "::",
            stringify!(bigdata)
        )
    );
}
#[test]
fn bindgen_test_layout_xloper() {
    assert_eq!(
        ::std::mem::size_of::<xloper>(),
        24usize,
        concat!("Size of: ", stringify!(xloper))
    );
    assert_eq!(
        ::std::mem::align_of::<xloper>(),
        8usize,
        concat!("Alignment of ", stringify!(xloper))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xloper>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xloper>())).xltype as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper),
            "::",
            stringify!(xltype)
        )
    );
}
pub type XLOPER = xloper;
pub type LPXLOPER = *mut xloper;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xloper12 {
    pub val: xloper12__bindgen_ty_1,
    pub xltype: DWORD,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xloper12__bindgen_ty_1 {
    pub num: f64,
    pub str: *mut XCHAR,
    pub xbool: BOOL,
    pub err: ::std::os::raw::c_int,
    pub w: ::std::os::raw::c_int,
    pub sref: xloper12__bindgen_ty_1__bindgen_ty_1,
    pub mref: xloper12__bindgen_ty_1__bindgen_ty_2,
    pub array: xloper12__bindgen_ty_1__bindgen_ty_3,
    pub flow: xloper12__bindgen_ty_1__bindgen_ty_4,
    pub bigdata: xloper12__bindgen_ty_1__bindgen_ty_5,
    _bindgen_union_align: [u64; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xloper12__bindgen_ty_1__bindgen_ty_1 {
    pub count: WORD,
    pub ref_: XLREF12,
}
#[test]
fn bindgen_test_layout_xloper12__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xloper12__bindgen_ty_1__bindgen_ty_1>(),
        20usize,
        concat!(
            "Size of: ",
            stringify!(xloper12__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xloper12__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(xloper12__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xloper12__bindgen_ty_1__bindgen_ty_1>())).count as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper12__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xloper12__bindgen_ty_1__bindgen_ty_1>())).ref_ as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper12__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(ref_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xloper12__bindgen_ty_1__bindgen_ty_2 {
    pub lpmref: *mut XLMREF12,
    pub idSheet: IDSHEET,
}
#[test]
fn bindgen_test_layout_xloper12__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<xloper12__bindgen_ty_1__bindgen_ty_2>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(xloper12__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xloper12__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xloper12__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xloper12__bindgen_ty_1__bindgen_ty_2>())).lpmref as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper12__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(lpmref)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xloper12__bindgen_ty_1__bindgen_ty_2>())).idSheet as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper12__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(idSheet)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xloper12__bindgen_ty_1__bindgen_ty_3 {
    pub lparray: *mut xloper12,
    pub rows: RW,
    pub columns: COL,
}
#[test]
fn bindgen_test_layout_xloper12__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<xloper12__bindgen_ty_1__bindgen_ty_3>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(xloper12__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xloper12__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xloper12__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xloper12__bindgen_ty_1__bindgen_ty_3>())).lparray as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper12__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(lparray)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xloper12__bindgen_ty_1__bindgen_ty_3>())).rows as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper12__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(rows)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xloper12__bindgen_ty_1__bindgen_ty_3>())).columns as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper12__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(columns)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xloper12__bindgen_ty_1__bindgen_ty_4 {
    pub valflow: xloper12__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1,
    pub rw: RW,
    pub col: COL,
    pub xlflow: BYTE,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xloper12__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1 {
    pub level: ::std::os::raw::c_int,
    pub tbctrl: ::std::os::raw::c_int,
    pub idSheet: IDSHEET,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_xloper12__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xloper12__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(xloper12__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xloper12__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xloper12__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xloper12__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1>())).level
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper12__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1),
            "::",
            stringify!(level)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xloper12__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1>())).tbctrl
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper12__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1),
            "::",
            stringify!(tbctrl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xloper12__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1>())).idSheet
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper12__bindgen_ty_1__bindgen_ty_4__bindgen_ty_1),
            "::",
            stringify!(idSheet)
        )
    );
}
#[test]
fn bindgen_test_layout_xloper12__bindgen_ty_1__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<xloper12__bindgen_ty_1__bindgen_ty_4>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(xloper12__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xloper12__bindgen_ty_1__bindgen_ty_4>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xloper12__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xloper12__bindgen_ty_1__bindgen_ty_4>())).valflow as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper12__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(valflow)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xloper12__bindgen_ty_1__bindgen_ty_4>())).rw as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper12__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(rw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xloper12__bindgen_ty_1__bindgen_ty_4>())).col as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper12__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(col)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xloper12__bindgen_ty_1__bindgen_ty_4>())).xlflow as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper12__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(xlflow)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xloper12__bindgen_ty_1__bindgen_ty_5 {
    pub h: xloper12__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
    pub cbData: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xloper12__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 {
    pub lpbData: *mut BYTE,
    pub hdata: HANDLE,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_xloper12__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xloper12__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(xloper12__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xloper12__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xloper12__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xloper12__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>())).lpbData
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper12__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1),
            "::",
            stringify!(lpbData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xloper12__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1>())).hdata
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper12__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1),
            "::",
            stringify!(hdata)
        )
    );
}
#[test]
fn bindgen_test_layout_xloper12__bindgen_ty_1__bindgen_ty_5() {
    assert_eq!(
        ::std::mem::size_of::<xloper12__bindgen_ty_1__bindgen_ty_5>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(xloper12__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xloper12__bindgen_ty_1__bindgen_ty_5>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xloper12__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xloper12__bindgen_ty_1__bindgen_ty_5>())).h as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper12__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xloper12__bindgen_ty_1__bindgen_ty_5>())).cbData as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper12__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(cbData)
        )
    );
}
#[test]
fn bindgen_test_layout_xloper12__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xloper12__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(xloper12__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xloper12__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(xloper12__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xloper12__bindgen_ty_1>())).num as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper12__bindgen_ty_1),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xloper12__bindgen_ty_1>())).str as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper12__bindgen_ty_1),
            "::",
            stringify!(str)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xloper12__bindgen_ty_1>())).xbool as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper12__bindgen_ty_1),
            "::",
            stringify!(xbool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xloper12__bindgen_ty_1>())).err as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper12__bindgen_ty_1),
            "::",
            stringify!(err)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xloper12__bindgen_ty_1>())).w as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper12__bindgen_ty_1),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xloper12__bindgen_ty_1>())).sref as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper12__bindgen_ty_1),
            "::",
            stringify!(sref)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xloper12__bindgen_ty_1>())).mref as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper12__bindgen_ty_1),
            "::",
            stringify!(mref)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xloper12__bindgen_ty_1>())).array as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper12__bindgen_ty_1),
            "::",
            stringify!(array)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xloper12__bindgen_ty_1>())).flow as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper12__bindgen_ty_1),
            "::",
            stringify!(flow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xloper12__bindgen_ty_1>())).bigdata as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper12__bindgen_ty_1),
            "::",
            stringify!(bigdata)
        )
    );
}
#[test]
fn bindgen_test_layout_xloper12() {
    assert_eq!(
        ::std::mem::size_of::<xloper12>(),
        32usize,
        concat!("Size of: ", stringify!(xloper12))
    );
    assert_eq!(
        ::std::mem::align_of::<xloper12>(),
        8usize,
        concat!("Alignment of ", stringify!(xloper12))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xloper12>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper12),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xloper12>())).xltype as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xloper12),
            "::",
            stringify!(xltype)
        )
    );
}
pub type XLOPER12 = xloper12;
pub type LPXLOPER12 = *mut xloper12;

// +EDIT
// The following code has been manually edited to correct the calling conventions, which
// were all "C". Calls such as Excel4v and XLCallVer are actually specified as "pascal"
// calling convention which is not currently supported by Rust. This is the same as "stdcall"
// except that the parameters claim at be passed left-to-right rather than right-to-left.
// This appears not to be the case, so we therefore leave the parameter order alone.

extern "cdecl" {
    #[link_name = "\u{1}_Excel4"]
    pub fn Excel4(
        xlfn: ::std::os::raw::c_int,
        operRes: LPXLOPER,
        count: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "stdcall" {
    #[link_name = "\u{1}EXCEL4V"]
    pub fn Excel4v(
        xlfn: ::std::os::raw::c_int,
        operRes: LPXLOPER,
        count: ::std::os::raw::c_int,
        opers: *mut LPXLOPER,
    ) -> ::std::os::raw::c_int;
}
extern "stdcall" {
    #[link_name = "\u{1}XLCALLVER"]
    pub fn XLCallVer() -> ::std::os::raw::c_int;
}
extern "stdcall" {
    #[link_name = "\u{1}LPENHELPER"]
    pub fn LPenHelper(wCode: ::std::os::raw::c_int, lpv: *mut VOID) -> ::std::os::raw::c_long;
}
extern "cdecl" {
    #[link_name = "\u{1}_Excel12"]
    pub fn Excel12(
        xlfn: ::std::os::raw::c_int,
        operRes: LPXLOPER12,
        count: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "stdcall" {
    #[link_name = "\u{1}EXCEL12V"]
    pub fn Excel12v(
        xlfn: ::std::os::raw::c_int,
        operRes: LPXLOPER12,
        count: ::std::os::raw::c_int,
        opers: *mut LPXLOPER12,
    ) -> ::std::os::raw::c_int;
}
pub type PXL_HPC_ASYNC_CALLBACK = ::std::option::Option<
    unsafe extern "stdcall" fn(
        dwAsyncHandle: DWORD,
        operReturn: LPXLOPER12,
    ) -> ::std::os::raw::c_int,
>;
// -EDIT

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fmlainfo {
    pub wPointMode: ::std::os::raw::c_int,
    pub cch: ::std::os::raw::c_int,
    pub lpch: *mut ::std::os::raw::c_char,
    pub ichFirst: ::std::os::raw::c_int,
    pub ichLast: ::std::os::raw::c_int,
    pub ichCaret: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__fmlainfo() {
    assert_eq!(
        ::std::mem::size_of::<_fmlainfo>(),
        32usize,
        concat!("Size of: ", stringify!(_fmlainfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_fmlainfo>(),
        8usize,
        concat!("Alignment of ", stringify!(_fmlainfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fmlainfo>())).wPointMode as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_fmlainfo),
            "::",
            stringify!(wPointMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fmlainfo>())).cch as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_fmlainfo),
            "::",
            stringify!(cch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fmlainfo>())).lpch as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_fmlainfo),
            "::",
            stringify!(lpch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fmlainfo>())).ichFirst as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_fmlainfo),
            "::",
            stringify!(ichFirst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fmlainfo>())).ichLast as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_fmlainfo),
            "::",
            stringify!(ichLast)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_fmlainfo>())).ichCaret as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_fmlainfo),
            "::",
            stringify!(ichCaret)
        )
    );
}
pub type FMLAINFO = _fmlainfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _mouseinfo {
    pub hwnd: HWND,
    pub pt: POINT,
    pub dt: ::std::os::raw::c_int,
    pub ht: ::std::os::raw::c_int,
    pub rw: ::std::os::raw::c_int,
    pub col: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__mouseinfo() {
    assert_eq!(
        ::std::mem::size_of::<_mouseinfo>(),
        40usize,
        concat!("Size of: ", stringify!(_mouseinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_mouseinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(_mouseinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_mouseinfo>())).hwnd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_mouseinfo),
            "::",
            stringify!(hwnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_mouseinfo>())).pt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_mouseinfo),
            "::",
            stringify!(pt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_mouseinfo>())).dt as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_mouseinfo),
            "::",
            stringify!(dt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_mouseinfo>())).ht as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_mouseinfo),
            "::",
            stringify!(ht)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_mouseinfo>())).rw as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_mouseinfo),
            "::",
            stringify!(rw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_mouseinfo>())).col as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_mouseinfo),
            "::",
            stringify!(col)
        )
    );
}
pub type MOUSEINFO = _mouseinfo;
