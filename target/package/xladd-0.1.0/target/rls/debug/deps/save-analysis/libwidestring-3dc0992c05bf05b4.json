{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.1","compilation":null,"prelude":{"crate_id":{"name":"widestring","disambiguator":[11661968383443201191,15247003624249020199]},"crate_root":"C:\\Users\\marcus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\widestring-0.4.0\\src","external_crates":[{"file_name":"C:\\Users\\marcus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\widestring-0.4.0\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[4759033778201518804,15942484631680448344]}},{"file_name":"C:\\Users\\marcus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\widestring-0.4.0\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[8464234789885013912,831666096015789919]}},{"file_name":"C:\\Users\\marcus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\widestring-0.4.0\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[1025629967568063349,4540099666420442477]}},{"file_name":"C:\\Users\\marcus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\widestring-0.4.0\\src\\lib.rs","num":4,"id":{"name":"alloc","disambiguator":[17417033470493109993,3742471267814204127]}},{"file_name":"C:\\Users\\marcus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\widestring-0.4.0\\src\\lib.rs","num":5,"id":{"name":"alloc_system","disambiguator":[11931159618822250592,5749589259965847089]}},{"file_name":"C:\\Users\\marcus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\widestring-0.4.0\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[16032528969048084541,4223291947604057195]}},{"file_name":"C:\\Users\\marcus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\widestring-0.4.0\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[7593628946493530159,7698290444019619971]}},{"file_name":"C:\\Users\\marcus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\widestring-0.4.0\\src\\lib.rs","num":8,"id":{"name":"panic_unwind","disambiguator":[15203464638137353811,14323786150779949589]}}],"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":0,"byte_end":19225,"line_start":1,"line_end":398,"column_start":1,"column_end":25}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":9940,"byte_end":9941,"line_start":190,"line_end":190,"column_start":19,"column_end":20},"alias_span":null,"name":"*","value":"UCStr, UCString","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":9960,"byte_end":9961,"line_start":191,"line_end":191,"column_start":18,"column_end":19},"alias_span":null,"name":"*","value":"FromUtf32Error, UStr, UString","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":0,"byte_end":19225,"line_start":1,"line_end":398,"column_start":1,"column_end":25},"name":"","qualname":"::","value":"C:\\Users\\marcus\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\widestring-0.4.0\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":30},{"krate":0,"index":354},{"krate":0,"index":612},{"krate":0,"index":614},{"krate":0,"index":616},{"krate":0,"index":620},{"krate":0,"index":624},{"krate":0,"index":628},{"krate":0,"index":630},{"krate":0,"index":632},{"krate":0,"index":634},{"krate":0,"index":636},{"krate":0,"index":638},{"krate":0,"index":640},{"krate":0,"index":642},{"krate":0,"index":644},{"krate":0,"index":646},{"krate":0,"index":648},{"krate":0,"index":650},{"krate":0,"index":652}],"decl_id":null,"docs":" A wide string FFI module for converting to and from wide string variants.","sig":null,"attributes":[{"value":"deny(future_incompatible)","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":9665,"byte_end":9694,"line_start":178,"line_end":178,"column_start":1,"column_end":30}},{"value":"warn(unused,\n       anonymous_parameters,\n       missing_docs,\n       missing_copy_implementations,\n       missing_debug_implementations,\n       trivial_casts,\n       trivial_numeric_casts)","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":9695,"byte_end":9856,"line_start":179,"line_end":182,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":654},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":21409,"byte_end":21417,"line_start":48,"line_end":48,"column_start":12,"column_end":20},"name":"UCString","qualname":"::ucstring::UCString","value":"UCString {  }","parent":null,"children":[{"krate":0,"index":275}],"decl_id":null,"docs":" An owned, mutable C-style \"wide\" string for FFI that is nul-aware and nul-terminated.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":21398,"byte_end":21452,"line_start":48,"line_end":50,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":694},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":22242,"byte_end":22247,"line_start":66,"line_end":66,"column_start":12,"column_end":17},"name":"UCStr","qualname":"::ucstring::UCStr","value":"UCStr {  }","parent":null,"children":[{"krate":0,"index":295}],"decl_id":null,"docs":" C-style wide string reference for `UCString`.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":22231,"byte_end":22277,"line_start":66,"line_end":68,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":730},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":22564,"byte_end":22572,"line_start":75,"line_end":75,"column_start":12,"column_end":20},"name":"NulError","qualname":"::ucstring::NulError","value":"","parent":null,"children":[],"decl_id":null,"docs":" An error returned from `UCString` to indicate that an invalid nul value was found.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":22553,"byte_end":22598,"line_start":75,"line_end":75,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":750},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":22860,"byte_end":22875,"line_start":82,"line_end":82,"column_start":12,"column_end":27},"name":"MissingNulError","qualname":"::ucstring::MissingNulError","value":"","parent":null,"children":[],"decl_id":null,"docs":" An error returned from `UCString` and `UCStr` to indicate that a terminating nul value\n was missing.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":22849,"byte_end":22895,"line_start":82,"line_end":82,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":24759,"byte_end":24762,"line_start":134,"line_end":134,"column_start":12,"column_end":15},"name":"new","qualname":"<UCString<C>>::new","value":"fn (v: impl Into<Vec<C>>) -> Result<Self, NulError<C>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `UCString` from a container of wide character data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":26891,"byte_end":26908,"line_start":190,"line_end":190,"column_start":12,"column_end":29},"name":"from_vec_with_nul","qualname":"<UCString<C>>::from_vec_with_nul","value":"fn (v: impl Into<Vec<C>>) -> Result<Self, MissingNulError<C>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `UCString` from a nul-terminated container of UTF-16 or UTF-32 data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":27769,"byte_end":27787,"line_start":212,"line_end":212,"column_start":19,"column_end":37},"name":"from_vec_unchecked","qualname":"<UCString<C>>::from_vec_unchecked","value":"fn (v: impl Into<Vec<C>>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a `UCString` from a vector without checking for interior nul values.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":28509,"byte_end":28536,"line_start":230,"line_end":230,"column_start":19,"column_end":46},"name":"from_vec_with_nul_unchecked","qualname":"<UCString<C>>::from_vec_with_nul_unchecked","value":"fn (v: impl Into<Vec<C>>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a `UCString` from a vector that should have a nul terminator, without checking\n for any nul values.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":29014,"byte_end":29023,"line_start":244,"line_end":244,"column_start":12,"column_end":21},"name":"from_ustr","qualname":"<UCString<C>>::from_ustr","value":"fn (s: impl AsRef<UStr<C>>) -> Result<Self, NulError<C>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `UCString` from anything that can be converted to a `UStr`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":29527,"byte_end":29546,"line_start":256,"line_end":256,"column_start":19,"column_end":38},"name":"from_ustr_unchecked","qualname":"<UCString<C>>::from_ustr_unchecked","value":"fn (s: impl AsRef<UStr<C>>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `UCString` from anything that can be converted to a `UStr`, without\n scanning for invalid nul values.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":30051,"byte_end":30069,"line_start":269,"line_end":269,"column_start":12,"column_end":30},"name":"from_ustr_with_nul","qualname":"<UCString<C>>::from_ustr_with_nul","value":"fn (s: impl AsRef<UStr<C>>) -> Result<Self, MissingNulError<C>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `UCString` from anything that can be converted to a `UStr` with a nul\n terminator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":30693,"byte_end":30721,"line_start":281,"line_end":281,"column_start":19,"column_end":47},"name":"from_ustr_with_nul_unchecked","qualname":"<UCString<C>>::from_ustr_with_nul_unchecked","value":"fn (s: impl AsRef<UStr<C>>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `UCString` from anything that can be converted to a `UStr` with a nul\n terminator, without checking the string for any invalid interior nul values.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":31829,"byte_end":31841,"line_start":307,"line_end":307,"column_start":19,"column_end":31},"name":"from_ptr_str","qualname":"<UCString<C>>::from_ptr_str","value":"fn (p: *const C) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `UCString` copied from a nul-terminated string pointer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":32181,"byte_end":32189,"line_start":318,"line_end":318,"column_start":12,"column_end":20},"name":"as_ucstr","qualname":"<UCString<C>>::as_ucstr","value":"fn (&self) -> &UCStr<C>","parent":null,"children":[],"decl_id":null,"docs":" Converts to a `UCStr` reference.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":32482,"byte_end":32490,"line_start":327,"line_end":327,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<UCString<C>>::into_vec","value":"fn (self) -> Vec<C>","parent":null,"children":[],"decl_id":null,"docs":" Converts the wide string into a `Vec` without a nul terminator, consuming the string in\n the process.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":32783,"byte_end":32800,"line_start":336,"line_end":336,"column_start":12,"column_end":29},"name":"into_vec_with_nul","qualname":"<UCString<C>>::into_vec_with_nul","value":"fn (self) -> Vec<C>","parent":null,"children":[],"decl_id":null,"docs":" Converts the wide string into a `Vec`, consuming the string in the process.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":33257,"byte_end":33265,"line_start":349,"line_end":349,"column_start":12,"column_end":20},"name":"into_raw","qualname":"<UCString<C>>::into_raw","value":"fn (self) -> *mut C","parent":null,"children":[],"decl_id":null,"docs":" Transfers ownership of the wide string to a C caller.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":33676,"byte_end":33684,"line_start":360,"line_end":360,"column_start":19,"column_end":27},"name":"from_raw","qualname":"<UCString<C>>::from_raw","value":"fn (p: *mut C) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Retakes ownership of a `UCString` that was transferred to C.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":34774,"byte_end":34790,"line_start":395,"line_end":395,"column_start":12,"column_end":28},"name":"into_boxed_ucstr","qualname":"<UCString<C>>::into_boxed_ucstr","value":"fn (self) -> Box<UCStr<C>>","parent":null,"children":[],"decl_id":null,"docs":" Converts this `UCString` into a boxed `UCStr`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":36220,"byte_end":36228,"line_start":441,"line_end":441,"column_start":12,"column_end":20},"name":"from_str","qualname":"<UCString<u16>>::from_str","value":"fn (s: impl AsRef<str>) -> Result<Self, NulError<u16>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `U16CString` from a `str`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":37022,"byte_end":37040,"line_start":463,"line_end":463,"column_start":19,"column_end":37},"name":"from_str_unchecked","qualname":"<UCString<u16>>::from_str_unchecked","value":"fn (s: impl AsRef<str>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `U16CString` from a `str`, without checking for interior nul values.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":38168,"byte_end":38185,"line_start":496,"line_end":496,"column_start":12,"column_end":29},"name":"from_str_with_nul","qualname":"<UCString<u16>>::from_str_with_nul","value":"fn (s: impl AsRef<str>) -> Result<Self, MissingNulError<u16>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `U16CString` from a `str` with a nul terminator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":39120,"byte_end":39147,"line_start":519,"line_end":519,"column_start":19,"column_end":46},"name":"from_str_with_nul_unchecked","qualname":"<UCString<u16>>::from_str_with_nul_unchecked","value":"fn (s: impl AsRef<str>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `U16CString` from str `str` that should have a terminating nul, but without\n checking for any nul values.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":40018,"byte_end":40026,"line_start":543,"line_end":543,"column_start":19,"column_end":27},"name":"from_ptr","qualname":"<UCString<u16>>::from_ptr","value":"fn (p: *const u16, len: usize) -> Result<Self, NulError<u16>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `U16CString` copied from a `u16` pointer and a length.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":40965,"byte_end":40983,"line_start":567,"line_end":567,"column_start":19,"column_end":37},"name":"from_ptr_unchecked","qualname":"<UCString<u16>>::from_ptr_unchecked","value":"fn (p: *const u16, len: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `U16CString` copied from a `u16` pointer and a length.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":41963,"byte_end":41980,"line_start":595,"line_end":595,"column_start":19,"column_end":36},"name":"from_ptr_with_nul","qualname":"<UCString<u16>>::from_ptr_with_nul","value":"fn (p: *const u16, len: usize) -> Result<Self, MissingNulError<u16>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `U16String` copied from a `u16` pointer and a length.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":43135,"byte_end":43162,"line_start":624,"line_end":624,"column_start":19,"column_end":46},"name":"from_ptr_with_nul_unchecked","qualname":"<UCString<u16>>::from_ptr_with_nul_unchecked","value":"fn (p: *const u16, len: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `U16String` copied from a `u16` pointer and a length.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":44446,"byte_end":44457,"line_start":662,"line_end":662,"column_start":12,"column_end":23},"name":"from_os_str","qualname":"<UCString<u16>>::from_os_str","value":"fn (s: impl AsRef<OsStr>) -> Result<Self, NulError<u16>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `U16CString` from anything that can be converted to an `OsStr`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":45291,"byte_end":45312,"line_start":685,"line_end":685,"column_start":19,"column_end":40},"name":"from_os_str_unchecked","qualname":"<UCString<u16>>::from_os_str_unchecked","value":"fn (s: impl AsRef<OsStr>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `U16CString` from anything that can be converted to an `OsStr`, without\n checking for interior nul values.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":46480,"byte_end":46500,"line_start":719,"line_end":719,"column_start":12,"column_end":32},"name":"from_os_str_with_nul","qualname":"<UCString<u16>>::from_os_str_with_nul","value":"fn (s: impl AsRef<OsStr>) -> Result<Self, MissingNulError<u16>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `U16CString` from anything that can be converted to an `OsStr` with a nul\n terminator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":47465,"byte_end":47495,"line_start":742,"line_end":742,"column_start":19,"column_end":49},"name":"from_os_str_with_nul_unchecked","qualname":"<UCString<u16>>::from_os_str_with_nul_unchecked","value":"fn (s: impl AsRef<OsStr>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `U16CString` from anything that can be converted to an `OsStr` that should\n have a terminating nul, but without checking for any nul values.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":48902,"byte_end":48912,"line_start":780,"line_end":780,"column_start":12,"column_end":22},"name":"from_chars","qualname":"<UCString<u32>>::from_chars","value":"fn (v: impl Into<Vec<char>>) -> Result<Self, NulError<u32>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `U32CString` from a container of wide character data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":50303,"byte_end":50322,"line_start":815,"line_end":815,"column_start":12,"column_end":31},"name":"from_chars_with_nul","qualname":"<UCString<u32>>::from_chars_with_nul","value":"fn (v: impl Into<Vec<char>>) -> Result<Self, MissingNulError<u32>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `U32CString` from a nul-terminated container of UTF-32 data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":50963,"byte_end":50983,"line_start":830,"line_end":830,"column_start":19,"column_end":39},"name":"from_chars_unchecked","qualname":"<UCString<u32>>::from_chars_unchecked","value":"fn (v: impl Into<Vec<char>>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a `U32CString` from a vector without checking for interior nul values.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":51560,"byte_end":51589,"line_start":843,"line_end":843,"column_start":19,"column_end":48},"name":"from_chars_with_nul_unchecked","qualname":"<UCString<u32>>::from_chars_with_nul_unchecked","value":"fn (v: impl Into<Vec<char>>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a `U32CString` from a vector that should have a nul terminator, without checking\n for any nul values.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":52717,"byte_end":52725,"line_start":877,"line_end":877,"column_start":12,"column_end":20},"name":"from_str","qualname":"<UCString<u32>>::from_str","value":"fn (s: impl AsRef<str>) -> Result<Self, NulError<u32>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `U32CString` from a `str`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":53520,"byte_end":53538,"line_start":899,"line_end":899,"column_start":19,"column_end":37},"name":"from_str_unchecked","qualname":"<UCString<u32>>::from_str_unchecked","value":"fn (s: impl AsRef<str>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `U32CString` from a `str`, without checking for interior nul values.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":54662,"byte_end":54679,"line_start":932,"line_end":932,"column_start":12,"column_end":29},"name":"from_str_with_nul","qualname":"<UCString<u32>>::from_str_with_nul","value":"fn (s: impl AsRef<str>) -> Result<Self, MissingNulError<u32>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `U32CString` from a `str` with a nul terminator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":55608,"byte_end":55635,"line_start":955,"line_end":955,"column_start":19,"column_end":46},"name":"from_str_with_nul_unchecked","qualname":"<UCString<u32>>::from_str_with_nul_unchecked","value":"fn (s: impl AsRef<str>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `U32CString` from a `str` that should have a terminating nul, but without\n checking for any nul values.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":56502,"byte_end":56510,"line_start":979,"line_end":979,"column_start":19,"column_end":27},"name":"from_ptr","qualname":"<UCString<u32>>::from_ptr","value":"fn (p: *const u32, len: usize) -> Result<Self, NulError<u32>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `U32CString` copied from a `u32` pointer and a length.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":57449,"byte_end":57467,"line_start":1003,"line_end":1003,"column_start":19,"column_end":37},"name":"from_ptr_unchecked","qualname":"<UCString<u32>>::from_ptr_unchecked","value":"fn (p: *const u32, len: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `U32CString` copied from a `u32` pointer and a length.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":58447,"byte_end":58464,"line_start":1031,"line_end":1031,"column_start":19,"column_end":36},"name":"from_ptr_with_nul","qualname":"<UCString<u32>>::from_ptr_with_nul","value":"fn (p: *const u32, len: usize) -> Result<Self, MissingNulError<u32>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `U32String` copied from a `u32` pointer and a length.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":59619,"byte_end":59646,"line_start":1060,"line_end":1060,"column_start":19,"column_end":46},"name":"from_ptr_with_nul_unchecked","qualname":"<UCString<u32>>::from_ptr_with_nul_unchecked","value":"fn (p: *const u32, len: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `U32String` copied from a `u32` pointer and a length.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":60626,"byte_end":60639,"line_start":1088,"line_end":1088,"column_start":19,"column_end":32},"name":"from_char_ptr","qualname":"<UCString<u32>>::from_char_ptr","value":"fn (p: *const char, len: usize) -> Result<Self, NulError<u32>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `U32CString` copied from a `char` pointer and a length.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":61445,"byte_end":61468,"line_start":1107,"line_end":1107,"column_start":19,"column_end":42},"name":"from_char_ptr_unchecked","qualname":"<UCString<u32>>::from_char_ptr_unchecked","value":"fn (p: *const char, len: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `U32CString` copied from a `char` pointer and a length.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":62314,"byte_end":62336,"line_start":1130,"line_end":1130,"column_start":19,"column_end":41},"name":"from_char_ptr_with_nul","qualname":"<UCString<u32>>::from_char_ptr_with_nul","value":"fn (p: *const char, len: usize) -> Result<Self, MissingNulError<u32>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `U32String` copied from a `char` pointer and a length.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":63353,"byte_end":63385,"line_start":1154,"line_end":1154,"column_start":19,"column_end":51},"name":"from_char_ptr_with_nul_unchecked","qualname":"<UCString<u32>>::from_char_ptr_with_nul_unchecked","value":"fn (p: *const char, len: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `U32String` copied from a `char` pointer and a length.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":64533,"byte_end":64544,"line_start":1187,"line_end":1187,"column_start":12,"column_end":23},"name":"from_os_str","qualname":"<UCString<u32>>::from_os_str","value":"fn (s: impl AsRef<OsStr>) -> Result<Self, NulError<u32>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `U32CString` from anything that can be converted to an `OsStr`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":65410,"byte_end":65431,"line_start":1210,"line_end":1210,"column_start":19,"column_end":40},"name":"from_os_str_unchecked","qualname":"<UCString<u32>>::from_os_str_unchecked","value":"fn (s: impl AsRef<OsStr>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `U32CString` from anything that can be converted to an `OsStr`, without\n checking for interior nul values.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":66626,"byte_end":66646,"line_start":1244,"line_end":1244,"column_start":12,"column_end":32},"name":"from_os_str_with_nul","qualname":"<UCString<u32>>::from_os_str_with_nul","value":"fn (s: impl AsRef<OsStr>) -> Result<Self, MissingNulError<u32>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `U32CString` from anything that can be converted to an `OsStr` with a nul\n terminator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":67638,"byte_end":67668,"line_start":1267,"line_end":1267,"column_start":19,"column_end":49},"name":"from_os_str_with_nul_unchecked","qualname":"<UCString<u32>>::from_os_str_with_nul_unchecked","value":"fn (s: impl AsRef<OsStr>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `U32CString` from anything that can be converted to an `OsStr` that should\n have a terminating nul, but without checking for any nul values.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":67913,"byte_end":67916,"line_start":1275,"line_end":1275,"column_start":12,"column_end":15},"name":"new","qualname":"<UCStr<C>>::new","value":"fn <S> (s: &S) -> &Self","parent":null,"children":[],"decl_id":null,"docs":" Coerces a value into a `UCStr`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":68972,"byte_end":68984,"line_start":1301,"line_end":1301,"column_start":19,"column_end":31},"name":"from_ptr_str","qualname":"<UCStr<C>>::from_ptr_str","value":"fn <'a> (p: *const C) -> &'a Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `UStr` from a nul-terminated string pointer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":70482,"byte_end":70499,"line_start":1337,"line_end":1337,"column_start":19,"column_end":36},"name":"from_ptr_with_nul","qualname":"<UCStr<C>>::from_ptr_with_nul","value":"fn <'a> (p: *const C, len: usize) -> &'a Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `UStr` from a pointer and a length.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":71061,"byte_end":71080,"line_start":1350,"line_end":1350,"column_start":12,"column_end":31},"name":"from_slice_with_nul","qualname":"<UCStr<C>>::from_slice_with_nul","value":"fn (slice: &[C]) -> Result<&Self, MissingNulError<C>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `UCStr` from a slice of values that has a nul terminator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":71737,"byte_end":71766,"line_start":1365,"line_end":1365,"column_start":19,"column_end":48},"name":"from_slice_with_nul_unchecked","qualname":"<UCStr<C>>::from_slice_with_nul_unchecked","value":"fn (slice: &[C]) -> &Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `UCStr` from a slice of values that has a nul terminator. No\n checking for nul values is performed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":71902,"byte_end":71913,"line_start":1370,"line_end":1370,"column_start":12,"column_end":23},"name":"to_ucstring","qualname":"<UCStr<C>>::to_ucstring","value":"fn (&self) -> UCString<C>","parent":null,"children":[],"decl_id":null,"docs":" Copies the wide string to an new owned `UString`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":73220,"byte_end":73230,"line_start":1407,"line_end":1407,"column_start":12,"column_end":22},"name":"to_ustring","qualname":"<UCStr<C>>::to_ustring","value":"fn (&self) -> UString<C>","parent":null,"children":[],"decl_id":null,"docs":" Copies the wide string to a new owned `UString`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":73430,"byte_end":73438,"line_start":1414,"line_end":1414,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<UCStr<C>>::as_slice","value":"fn (&self) -> &[C]","parent":null,"children":[],"decl_id":null,"docs":" Converts to a slice of the wide string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":73586,"byte_end":73603,"line_start":1419,"line_end":1419,"column_start":12,"column_end":29},"name":"as_slice_with_nul","qualname":"<UCStr<C>>::as_slice_with_nul","value":"fn (&self) -> &[C]","parent":null,"children":[],"decl_id":null,"docs":" Converts to a slice of the wide string, including the nul terminator.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":73794,"byte_end":73800,"line_start":1426,"line_end":1426,"column_start":12,"column_end":18},"name":"as_ptr","qualname":"<UCStr<C>>::as_ptr","value":"fn (&self) -> *const C","parent":null,"children":[],"decl_id":null,"docs":" Returns a raw pointer to the wide string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":74004,"byte_end":74007,"line_start":1432,"line_end":1432,"column_start":12,"column_end":15},"name":"len","qualname":"<UCStr<C>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the length of the wide string as number of elements (**not** number of bytes)\n **not** including nul terminator.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":74166,"byte_end":74174,"line_start":1437,"line_end":1437,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<UCStr<C>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether this wide string contains no data (i.e. is only the nul terminator).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":74966,"byte_end":74979,"line_start":1462,"line_end":1462,"column_start":12,"column_end":25},"name":"into_ucstring","qualname":"<UCStr<C>>::into_ucstring","value":"fn (self: Box<Self>) -> UCString<C>","parent":null,"children":[],"decl_id":null,"docs":" Converts a `Box<UCStr>` into a `UCString` without copying or allocating.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":75995,"byte_end":76007,"line_start":1494,"line_end":1494,"column_start":12,"column_end":24},"name":"to_os_string","qualname":"<UCStr<u16>>::to_os_string","value":"fn (&self) -> OsString","parent":null,"children":[],"decl_id":null,"docs":" Decodes a wide string to an owned `OsString`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":76645,"byte_end":76654,"line_start":1516,"line_end":1516,"column_start":12,"column_end":21},"name":"to_string","qualname":"<UCStr<u16>>::to_string","value":"fn (&self) -> Result<String, std::string::FromUtf16Error>","parent":null,"children":[],"decl_id":null,"docs":" Copies the wide string to a `String` if it contains valid UTF-16 data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":77269,"byte_end":77284,"line_start":1536,"line_end":1536,"column_start":12,"column_end":27},"name":"to_string_lossy","qualname":"<UCStr<u16>>::to_string_lossy","value":"fn (&self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Copies the wide string to a `String`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":78372,"byte_end":78389,"line_start":1564,"line_end":1564,"column_start":19,"column_end":36},"name":"from_char_ptr_str","qualname":"<UCStr<u32>>::from_char_ptr_str","value":"fn <'a> (p: *const char) -> &'a Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `U32Str` from a `char` nul-terminated string pointer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":79746,"byte_end":79768,"line_start":1595,"line_end":1595,"column_start":19,"column_end":41},"name":"from_char_ptr_with_nul","qualname":"<UCStr<u32>>::from_char_ptr_with_nul","value":"fn <'a> (p: *const char, len: usize) -> &'a Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `U32Str` from a `char` pointer and a length.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":80278,"byte_end":80302,"line_start":1607,"line_end":1607,"column_start":12,"column_end":36},"name":"from_char_slice_with_nul","qualname":"<UCStr<u32>>::from_char_slice_with_nul","value":"fn (slice: &[char]) -> Result<&Self, MissingNulError<u32>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `U32CStr` from a slice of `char` values that has a nul terminator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":80831,"byte_end":80865,"line_start":1619,"line_end":1619,"column_start":19,"column_end":53},"name":"from_char_slice_with_nul_unchecked","qualname":"<UCStr<u32>>::from_char_slice_with_nul_unchecked","value":"fn (slice: &[char]) -> &Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `U32CStr` from a slice of `char` values that has a nul terminator. No\n checking for nul values is performed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":81698,"byte_end":81710,"line_start":1642,"line_end":1642,"column_start":12,"column_end":24},"name":"to_os_string","qualname":"<UCStr<u32>>::to_os_string","value":"fn (&self) -> OsString","parent":null,"children":[],"decl_id":null,"docs":" Decodes a wide string to an owned `OsString`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":82341,"byte_end":82350,"line_start":1664,"line_end":1664,"column_start":12,"column_end":21},"name":"to_string","qualname":"<UCStr<u32>>::to_string","value":"fn (&self) -> Result<String, FromUtf32Error>","parent":null,"children":[],"decl_id":null,"docs":" Copies the wide string to a `String` if it contains valid UTF-32 data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":82946,"byte_end":82961,"line_start":1684,"line_end":1684,"column_start":12,"column_end":27},"name":"to_string_lossy","qualname":"<UCStr<u32>>::to_string_lossy","value":"fn (&self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Copies the wide string to a `String`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":326},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":87362,"byte_end":87374,"line_start":1868,"line_end":1868,"column_start":12,"column_end":24},"name":"nul_position","qualname":"<NulError<C>>::nul_position","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the position of the nul value in the slice that was provided to `U16CString`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":328},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":87555,"byte_end":87563,"line_start":1874,"line_end":1874,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<NulError<C>>::into_vec","value":"fn (self) -> Vec<C>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this error, returning the underlying vector of u16 values which generated the error\n in the first place.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":344},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":88204,"byte_end":88212,"line_start":1900,"line_end":1900,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<MissingNulError<C>>::into_vec","value":"fn (self) -> Option<Vec<C>>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this error, returning the underlying vector of `u16` values which generated the\n error in the first place.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":770},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":90363,"byte_end":90370,"line_start":50,"line_end":50,"column_start":12,"column_end":19},"name":"UString","qualname":"::ustring::UString","value":"UString {  }","parent":null,"children":[{"krate":0,"index":343}],"decl_id":null,"docs":" An owned, mutable \"wide\" string for FFI that is **not** nul-aware.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":90352,"byte_end":90403,"line_start":50,"line_end":52,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":814},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":91285,"byte_end":91289,"line_start":71,"line_end":71,"column_start":12,"column_end":16},"name":"UStr","qualname":"::ustring::UStr","value":"UStr {  }","parent":null,"children":[{"krate":0,"index":365}],"decl_id":null,"docs":" String slice reference for `U16String`.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":91274,"byte_end":91319,"line_start":71,"line_end":73,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":850},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":91531,"byte_end":91545,"line_start":79,"line_end":79,"column_start":12,"column_end":26},"name":"FromUtf32Error","qualname":"::ustring::FromUtf32Error","value":"","parent":null,"children":[],"decl_id":null,"docs":" A possible error value when converting a String from a UTF-32 byte slice.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":91520,"byte_end":91548,"line_start":79,"line_end":79,"column_start":1,"column_end":29}},{"value":"rustc_copy_clone_marker","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":91520,"byte_end":91548,"line_start":79,"line_end":79,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":374},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":91631,"byte_end":91634,"line_start":83,"line_end":83,"column_start":12,"column_end":15},"name":"new","qualname":"<UString<C>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new empty `UString`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":376},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":92505,"byte_end":92513,"line_start":111,"line_end":111,"column_start":12,"column_end":20},"name":"from_vec","qualname":"<UString<C>>::from_vec","value":"fn (raw: impl Into<Vec<C>>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `UString` from a vector of possibly invalid or ill-formed UTF-16 or UTF-32\n data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":378},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":93011,"byte_end":93019,"line_start":127,"line_end":127,"column_start":19,"column_end":27},"name":"from_ptr","qualname":"<UString<C>>::from_ptr","value":"fn (p: *const C, len: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `UString` from a pointer and a length.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":380},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":93490,"byte_end":93503,"line_start":140,"line_end":140,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<UString<C>>::with_capacity","value":"fn (capacity: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a `UString` with the given capacity.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":382},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":93698,"byte_end":93706,"line_start":147,"line_end":147,"column_start":12,"column_end":20},"name":"capacity","qualname":"<UString<C>>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the capacity this `UString` can hold without reallocating.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":384},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":93820,"byte_end":93825,"line_start":152,"line_end":152,"column_start":12,"column_end":17},"name":"clear","qualname":"<UString<C>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Truncate the `UString` to zero length.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":386},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":94075,"byte_end":94082,"line_start":160,"line_end":160,"column_start":12,"column_end":19},"name":"reserve","qualname":"<UString<C>>::reserve","value":"fn (&mut self, additional: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reserves the capacity for at least `additional` more capacity to be inserted in the given\n `UString`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":94553,"byte_end":94566,"line_start":169,"line_end":169,"column_start":12,"column_end":25},"name":"reserve_exact","qualname":"<UString<C>>::reserve_exact","value":"fn (&mut self, additional: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reserves the minimum capacity for exactly `additional` more capacity to be inserted in the\n given `UString`. Does nothing if the capcity is already sufficient.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":94746,"byte_end":94754,"line_start":174,"line_end":174,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<UString<C>>::into_vec","value":"fn (self) -> Vec<C>","parent":null,"children":[],"decl_id":null,"docs":" Converts the wide string into a `Vec`, consuming the string in the process.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":392},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":94850,"byte_end":94857,"line_start":179,"line_end":179,"column_start":12,"column_end":19},"name":"as_ustr","qualname":"<UString<C>>::as_ustr","value":"fn (&self) -> &UStr<C>","parent":null,"children":[],"decl_id":null,"docs":" Converts to a `UStr` reference.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":394},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":95873,"byte_end":95877,"line_start":211,"line_end":211,"column_start":12,"column_end":16},"name":"push","qualname":"<UString<C>>::push","value":"fn (&mut self, s: impl AsRef<UStr<C>>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Extends the wide string with the given `&UStr`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":396},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":96962,"byte_end":96972,"line_start":243,"line_end":243,"column_start":12,"column_end":22},"name":"push_slice","qualname":"<UString<C>>::push_slice","value":"fn (&mut self, s: impl AsRef<[C]>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Extends the wide string with the given slice.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":398},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":97706,"byte_end":97719,"line_start":274,"line_end":274,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<UString<C>>::shrink_to_fit","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the `UString` to match its length.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":400},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":98245,"byte_end":98260,"line_start":297,"line_end":297,"column_start":12,"column_end":27},"name":"into_boxed_ustr","qualname":"<UString<C>>::into_boxed_ustr","value":"fn (self) -> Box<UStr<C>>","parent":null,"children":[],"decl_id":null,"docs":" Converts this `UString` into a boxed `UStr`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":404},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":98926,"byte_end":98934,"line_start":319,"line_end":319,"column_start":12,"column_end":20},"name":"from_str","qualname":"<UString<u16>>::from_str","value":"fn <S> (s: &S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Encodes a `U16String` copy from a `str`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":406},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":99607,"byte_end":99618,"line_start":340,"line_end":340,"column_start":12,"column_end":23},"name":"from_os_str","qualname":"<UString<u16>>::from_os_str","value":"fn <S> (s: &S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Encodes a `U16String` copy from an `OsStr`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":100333,"byte_end":100341,"line_start":362,"line_end":362,"column_start":12,"column_end":20},"name":"push_str","qualname":"<UString<u16>>::push_str","value":"fn (&mut self, s: impl AsRef<str>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Extends the string with the given `&str`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":410},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":101026,"byte_end":101037,"line_start":382,"line_end":382,"column_start":12,"column_end":23},"name":"push_os_str","qualname":"<UString<u16>>::push_os_str","value":"fn (&mut self, s: impl AsRef<OsStr>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Extends the string with the given `&OsStr`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":414},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":101665,"byte_end":101675,"line_start":402,"line_end":402,"column_start":12,"column_end":22},"name":"from_chars","qualname":"<UString<u32>>::from_chars","value":"fn (raw: impl Into<Vec<char>>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `U32String` from a vector of UTF-32 data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":416},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":102302,"byte_end":102310,"line_start":423,"line_end":423,"column_start":12,"column_end":20},"name":"from_str","qualname":"<UString<u32>>::from_str","value":"fn <S> (s: &S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Encodes a `U32String` copy from a `str`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":418},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":102990,"byte_end":103001,"line_start":443,"line_end":443,"column_start":12,"column_end":23},"name":"from_os_str","qualname":"<UString<u32>>::from_os_str","value":"fn <S> (s: &S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Encodes a `U32String` copy from an `OsStr`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":420},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":103595,"byte_end":103608,"line_start":460,"line_end":460,"column_start":19,"column_end":32},"name":"from_char_ptr","qualname":"<UString<u32>>::from_char_ptr","value":"fn (p: *const char, len: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `U32String` from a `char` pointer and a length.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":422},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":104288,"byte_end":104296,"line_start":480,"line_end":480,"column_start":12,"column_end":20},"name":"push_str","qualname":"<UString<u32>>::push_str","value":"fn (&mut self, s: impl AsRef<str>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Extends the string with the given `&str`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":424},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":104992,"byte_end":105003,"line_start":500,"line_end":500,"column_start":12,"column_end":23},"name":"push_os_str","qualname":"<UString<u32>>::push_os_str","value":"fn (&mut self, s: impl AsRef<OsStr>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Extends the string with the given `&OsStr`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":428},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":105218,"byte_end":105221,"line_start":508,"line_end":508,"column_start":12,"column_end":15},"name":"new","qualname":"<UStr<C>>::new","value":"fn <S> (s: &S) -> &Self","parent":null,"children":[],"decl_id":null,"docs":" Coerces a value into a `UStr`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":430},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":106051,"byte_end":106059,"line_start":531,"line_end":531,"column_start":19,"column_end":27},"name":"from_ptr","qualname":"<UStr<C>>::from_ptr","value":"fn <'a> (p: *const C, len: usize) -> &'a Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `UStr` from a pointer and a length.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":432},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":106322,"byte_end":106332,"line_start":539,"line_end":539,"column_start":12,"column_end":22},"name":"from_slice","qualname":"<UStr<C>>::from_slice","value":"fn (slice: &[C]) -> &Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `UStr` from a slice of code points.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":434},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":106473,"byte_end":106483,"line_start":544,"line_end":544,"column_start":12,"column_end":22},"name":"to_ustring","qualname":"<UStr<C>>::to_ustring","value":"fn (&self) -> UString<C>","parent":null,"children":[],"decl_id":null,"docs":" Copies the wide string to a new owned `UString`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":436},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":106612,"byte_end":106620,"line_start":549,"line_end":549,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<UStr<C>>::as_slice","value":"fn (&self) -> &[C]","parent":null,"children":[],"decl_id":null,"docs":" Converts to a slice of the wide string.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":438},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":106811,"byte_end":106817,"line_start":556,"line_end":556,"column_start":12,"column_end":18},"name":"as_ptr","qualname":"<UStr<C>>::as_ptr","value":"fn (&self) -> *const C","parent":null,"children":[],"decl_id":null,"docs":" Returns a raw pointer to the wide string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":440},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":106980,"byte_end":106983,"line_start":561,"line_end":561,"column_start":12,"column_end":15},"name":"len","qualname":"<UStr<C>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the length of the wide string as number of elements (**not** number of bytes).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":442},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":107104,"byte_end":107112,"line_start":566,"line_end":566,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<UStr<C>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether this wide string contains no data.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":444},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":107257,"byte_end":107269,"line_start":571,"line_end":571,"column_start":12,"column_end":24},"name":"into_ustring","qualname":"<UStr<C>>::into_ustring","value":"fn (self: Box<Self>) -> UString<C>","parent":null,"children":[],"decl_id":null,"docs":" Converts a `Box<UStr>` into a `UString` without copying or allocating.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":448},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":108131,"byte_end":108143,"line_start":598,"line_end":598,"column_start":12,"column_end":24},"name":"to_os_string","qualname":"<UStr<u16>>::to_os_string","value":"fn (&self) -> OsString","parent":null,"children":[],"decl_id":null,"docs":" Decodes a wide string to an owned `OsString`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":450},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":108766,"byte_end":108775,"line_start":620,"line_end":620,"column_start":12,"column_end":21},"name":"to_string","qualname":"<UStr<u16>>::to_string","value":"fn (&self) -> Result<String, std::string::FromUtf16Error>","parent":null,"children":[],"decl_id":null,"docs":" Copies the wide string to a `String` if it contains valid UTF-16 data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":452},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":109383,"byte_end":109398,"line_start":640,"line_end":640,"column_start":12,"column_end":27},"name":"to_string_lossy","qualname":"<UStr<u16>>::to_string_lossy","value":"fn (&self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Copies the wide string to a `String`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":456},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":110266,"byte_end":110279,"line_start":665,"line_end":665,"column_start":19,"column_end":32},"name":"from_char_ptr","qualname":"<UStr<u32>>::from_char_ptr","value":"fn <'a> (p: *const char, len: usize) -> &'a Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `U32Str` from a `char` pointer and a length.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":458},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":110508,"byte_end":110523,"line_start":672,"line_end":672,"column_start":12,"column_end":27},"name":"from_char_slice","qualname":"<UStr<u32>>::from_char_slice","value":"fn (slice: &[char]) -> &Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `U32Str` from a slice of `u32` code points.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":460},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":111257,"byte_end":111269,"line_start":694,"line_end":694,"column_start":12,"column_end":24},"name":"to_os_string","qualname":"<UStr<u32>>::to_os_string","value":"fn (&self) -> OsString","parent":null,"children":[],"decl_id":null,"docs":" Decodes a wide string to an owned `OsString`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":462},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":111886,"byte_end":111895,"line_start":716,"line_end":716,"column_start":12,"column_end":21},"name":"to_string","qualname":"<UStr<u32>>::to_string","value":"fn (&self) -> Result<String, FromUtf32Error>","parent":null,"children":[],"decl_id":null,"docs":" Copies the wide string to a `String` if it contains valid UTF-32 data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":464},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":113023,"byte_end":113038,"line_start":748,"line_end":748,"column_start":12,"column_end":27},"name":"to_string_lossy","qualname":"<UStr<u32>>::to_string_lossy","value":"fn (&self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Copies the wide string to a `String`.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":616},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":10082,"byte_end":10087,"line_start":195,"line_end":195,"column_start":11,"column_end":16},"name":"UChar","qualname":"::UChar","value":"UChar: Debug + Sized + Copy + Ord + Eq","parent":null,"children":[{"krate":0,"index":618}],"decl_id":null,"docs":" Marker trait for primitive types used to represent UTF character data. Should not be used\n directly.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":618},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":10161,"byte_end":10164,"line_start":197,"line_end":197,"column_start":11,"column_end":14},"name":"NUL","qualname":"::UChar::NUL","value":"Self","parent":{"krate":0,"index":616},"children":[],"decl_id":null,"docs":" NUL character value\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":628},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":10983,"byte_end":10989,"line_start":221,"line_end":221,"column_start":10,"column_end":16},"name":"U16Str","qualname":"::U16Str","value":"UStr<u16>","parent":null,"children":[],"decl_id":null,"docs":" String slice reference for `U16String`.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":630},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":12137,"byte_end":12146,"line_start":249,"line_end":249,"column_start":10,"column_end":19},"name":"U16String","qualname":"::U16String","value":"UString<u16>","parent":null,"children":[],"decl_id":null,"docs":" An owned, mutable \"wide\" string for FFI that is **not** nul-aware.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":632},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":12776,"byte_end":12783,"line_start":260,"line_end":260,"column_start":10,"column_end":17},"name":"U16CStr","qualname":"::U16CStr","value":"UCStr<u16>","parent":null,"children":[],"decl_id":null,"docs":" C-style wide string reference for `U16CString`.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":634},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":13893,"byte_end":13903,"line_start":286,"line_end":286,"column_start":10,"column_end":20},"name":"U16CString","qualname":"::U16CString","value":"UCString<u16>","parent":null,"children":[],"decl_id":null,"docs":" An owned, mutable C-style \"wide\" string for FFI that is nul-aware and nul-terminated.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":636},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":14634,"byte_end":14640,"line_start":301,"line_end":301,"column_start":10,"column_end":16},"name":"U32Str","qualname":"::U32Str","value":"UStr<u32>","parent":null,"children":[],"decl_id":null,"docs":" String slice reference for `U32String`.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":638},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":15799,"byte_end":15808,"line_start":329,"line_end":329,"column_start":10,"column_end":19},"name":"U32String","qualname":"::U32String","value":"UString<u32>","parent":null,"children":[],"decl_id":null,"docs":" An owned, mutable 32-bit wide string for FFI that is **not** nul-aware.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":640},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":16438,"byte_end":16445,"line_start":340,"line_end":340,"column_start":10,"column_end":17},"name":"U32CStr","qualname":"::U32CStr","value":"UCStr<u32>","parent":null,"children":[],"decl_id":null,"docs":" C-style wide string reference for `U32CString`.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":642},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":17553,"byte_end":17563,"line_start":366,"line_end":366,"column_start":10,"column_end":20},"name":"U32CString","qualname":"::U32CString","value":"UCString<u32>","parent":null,"children":[],"decl_id":null,"docs":" An owned, mutable C-style wide string for FFI that is nul-aware and nul-terminated.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":644},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":18562,"byte_end":18572,"line_start":386,"line_end":386,"column_start":10,"column_end":20},"name":"WideString","qualname":"::WideString","value":"U16String","parent":null,"children":[],"decl_id":null,"docs":" Alias for `U16String` or `U32String` depending on platform. Intended to match typical C `wchar_t` size on platform.\n","sig":null,"attributes":[{"value":"cfg(windows)","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":18417,"byte_end":18432,"line_start":384,"line_end":384,"column_start":1,"column_end":16}}]},{"kind":"Type","id":{"krate":0,"index":646},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":18733,"byte_end":18744,"line_start":389,"line_end":389,"column_start":10,"column_end":21},"name":"WideCString","qualname":"::WideCString","value":"U16CString","parent":null,"children":[],"decl_id":null,"docs":" Alias for `U16CString` or `U32CString` depending on platform. Intended to match typical C `wchar_t` size on platform.\n","sig":null,"attributes":[{"value":"cfg(windows)","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":18586,"byte_end":18601,"line_start":387,"line_end":387,"column_start":1,"column_end":16}}]},{"kind":"Type","id":{"krate":0,"index":648},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":18898,"byte_end":18905,"line_start":392,"line_end":392,"column_start":10,"column_end":17},"name":"WideStr","qualname":"::WideStr","value":"U16Str","parent":null,"children":[],"decl_id":null,"docs":" Alias for `U16Str` or `U32Str` depending on platform. Intended to match typical C `wchar_t` size on platform.\n","sig":null,"attributes":[{"value":"cfg(windows)","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":18759,"byte_end":18774,"line_start":390,"line_end":390,"column_start":1,"column_end":16}}]},{"kind":"Type","id":{"krate":0,"index":650},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":19057,"byte_end":19065,"line_start":395,"line_end":395,"column_start":10,"column_end":18},"name":"WideCStr","qualname":"::WideCStr","value":"U16CStr","parent":null,"children":[],"decl_id":null,"docs":" Alias for `U16CStr` or `U32CStr` depending on platform. Intended to match typical C `wchar_t` size on platform.\n","sig":null,"attributes":[{"value":"cfg(windows)","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":18916,"byte_end":18931,"line_start":393,"line_end":393,"column_start":1,"column_end":16}}]},{"kind":"Type","id":{"krate":0,"index":652},"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":19210,"byte_end":19218,"line_start":398,"line_end":398,"column_start":10,"column_end":18},"name":"WideChar","qualname":"::WideChar","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" Alias for `u16` or `u32` depending on platform. Intended to match typical C `wchar_t` size on platform.\n","sig":null,"attributes":[{"value":"cfg(windows)","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":19077,"byte_end":19092,"line_start":396,"line_end":396,"column_start":1,"column_end":16}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":22912,"byte_end":22920,"line_start":84,"line_end":84,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":56},{"krate":0,"index":58},{"krate":0,"index":60},{"krate":0,"index":62},{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":68},{"krate":0,"index":70},{"krate":0,"index":72},{"krate":0,"index":74},{"krate":0,"index":76},{"krate":0,"index":78},{"krate":0,"index":80},{"krate":0,"index":82},{"krate":0,"index":84},{"krate":0,"index":86}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":35220,"byte_end":35228,"line_start":411,"line_end":411,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":94},{"krate":0,"index":96},{"krate":0,"index":98},{"krate":0,"index":100},{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":108},{"krate":0,"index":110},{"krate":0,"index":112}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":47641,"byte_end":47649,"line_start":748,"line_end":748,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":116},{"krate":0,"index":118},{"krate":0,"index":120},{"krate":0,"index":122},{"krate":0,"index":124},{"krate":0,"index":126},{"krate":0,"index":128},{"krate":0,"index":130},{"krate":0,"index":132},{"krate":0,"index":134},{"krate":0,"index":136},{"krate":0,"index":138},{"krate":0,"index":140},{"krate":0,"index":142},{"krate":0,"index":144},{"krate":0,"index":146},{"krate":0,"index":148},{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":154}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":67851,"byte_end":67856,"line_start":1273,"line_end":1273,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":158},{"krate":0,"index":160},{"krate":0,"index":162},{"krate":0,"index":164},{"krate":0,"index":166},{"krate":0,"index":168},{"krate":0,"index":170},{"krate":0,"index":172},{"krate":0,"index":174},{"krate":0,"index":176},{"krate":0,"index":178},{"krate":0,"index":180},{"krate":0,"index":182},{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":75252,"byte_end":75257,"line_start":1474,"line_end":1474,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":188},{"krate":0,"index":190},{"krate":0,"index":192}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":77368,"byte_end":77373,"line_start":1541,"line_end":1541,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":196},{"krate":0,"index":198},{"krate":0,"index":200},{"krate":0,"index":202},{"krate":0,"index":204},{"krate":0,"index":206},{"krate":0,"index":208}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":83066,"byte_end":83074,"line_start":1689,"line_end":1689,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":212}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":83189,"byte_end":83192,"line_start":1695,"line_end":1695,"column_start":47,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":216}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":83369,"byte_end":83372,"line_start":1701,"line_end":1701,"column_start":47,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":220}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":83532,"byte_end":83540,"line_start":1707,"line_end":1707,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":224}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":83650,"byte_end":83658,"line_start":1713,"line_end":1713,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":228}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":83776,"byte_end":83783,"line_start":1719,"line_end":1719,"column_start":38,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":232}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":83923,"byte_end":83931,"line_start":1725,"line_end":1725,"column_start":65,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":236}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":84067,"byte_end":84075,"line_start":1731,"line_end":1731,"column_start":57,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":240},{"krate":0,"index":242}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":84271,"byte_end":84279,"line_start":1740,"line_end":1740,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":246},{"krate":0,"index":248}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":84787,"byte_end":84795,"line_start":1763,"line_end":1763,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":264}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":84933,"byte_end":84941,"line_start":1770,"line_end":1770,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":268}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":85260,"byte_end":85268,"line_start":1780,"line_end":1780,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":272}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":85457,"byte_end":85465,"line_start":1789,"line_end":1789,"column_start":50,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":276}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":85561,"byte_end":85566,"line_start":1795,"line_end":1795,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":280},{"krate":0,"index":282}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":85725,"byte_end":85728,"line_start":1802,"line_end":1802,"column_start":48,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":286}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":85910,"byte_end":85913,"line_start":1808,"line_end":1808,"column_start":48,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":290}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":86083,"byte_end":86088,"line_start":1814,"line_end":1814,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":294}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":86183,"byte_end":86191,"line_start":1820,"line_end":1820,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":298}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":86285,"byte_end":86290,"line_start":1826,"line_end":1826,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":302}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":86390,"byte_end":86398,"line_start":1832,"line_end":1832,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":306}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":86510,"byte_end":86513,"line_start":1838,"line_end":1838,"column_start":43,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":310}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":86758,"byte_end":86766,"line_start":1845,"line_end":1845,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":314}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":86898,"byte_end":86901,"line_start":1852,"line_end":1852,"column_start":38,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":318}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":87040,"byte_end":87043,"line_start":1859,"line_end":1859,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":322}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":87243,"byte_end":87251,"line_start":1866,"line_end":1866,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":326},{"krate":0,"index":328}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":87638,"byte_end":87646,"line_start":1879,"line_end":1879,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":332}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":87752,"byte_end":87760,"line_start":1885,"line_end":1885,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":336}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":87941,"byte_end":87949,"line_start":1891,"line_end":1891,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":340}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":88041,"byte_end":88056,"line_start":1897,"line_end":1897,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":344}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":88300,"byte_end":88315,"line_start":1905,"line_end":1905,"column_start":38,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":348}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":88487,"byte_end":88502,"line_start":1911,"line_end":1911,"column_start":38,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":352}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":91565,"byte_end":91572,"line_start":81,"line_end":81,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":374},{"krate":0,"index":376},{"krate":0,"index":378},{"krate":0,"index":380},{"krate":0,"index":382},{"krate":0,"index":384},{"krate":0,"index":386},{"krate":0,"index":388},{"krate":0,"index":390},{"krate":0,"index":392},{"krate":0,"index":394},{"krate":0,"index":396},{"krate":0,"index":398},{"krate":0,"index":400}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":98415,"byte_end":98422,"line_start":303,"line_end":303,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":404},{"krate":0,"index":406},{"krate":0,"index":408},{"krate":0,"index":410}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":101147,"byte_end":101154,"line_start":387,"line_end":387,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":414},{"krate":0,"index":416},{"krate":0,"index":418},{"krate":0,"index":420},{"krate":0,"index":422},{"krate":0,"index":424}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":105158,"byte_end":105162,"line_start":506,"line_end":506,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":428},{"krate":0,"index":430},{"krate":0,"index":432},{"krate":0,"index":434},{"krate":0,"index":436},{"krate":0,"index":438},{"krate":0,"index":440},{"krate":0,"index":442},{"krate":0,"index":444}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":107461,"byte_end":107465,"line_start":579,"line_end":579,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":448},{"krate":0,"index":450},{"krate":0,"index":452}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":109478,"byte_end":109482,"line_start":645,"line_end":645,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":456},{"krate":0,"index":458},{"krate":0,"index":460},{"krate":0,"index":462},{"krate":0,"index":464}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":113608,"byte_end":113615,"line_start":766,"line_end":766,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":468}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":113729,"byte_end":113732,"line_start":772,"line_end":772,"column_start":46,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":472}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":113878,"byte_end":113881,"line_start":778,"line_end":778,"column_start":46,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":476}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":114010,"byte_end":114013,"line_start":784,"line_end":784,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":480}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":114126,"byte_end":114129,"line_start":790,"line_end":790,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":484}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":114242,"byte_end":114245,"line_start":796,"line_end":796,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":488}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":114355,"byte_end":114362,"line_start":802,"line_end":802,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":492}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":114461,"byte_end":114468,"line_start":808,"line_end":808,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":496}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":114569,"byte_end":114576,"line_start":814,"line_end":814,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":500}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":114682,"byte_end":114689,"line_start":820,"line_end":820,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":504}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":114799,"byte_end":114807,"line_start":826,"line_end":826,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":508}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":114911,"byte_end":114919,"line_start":832,"line_end":832,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":512}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":115058,"byte_end":115065,"line_start":838,"line_end":838,"column_start":64,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":516}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":115200,"byte_end":115207,"line_start":844,"line_end":844,"column_start":57,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":520},{"krate":0,"index":522}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":115400,"byte_end":115407,"line_start":853,"line_end":853,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":526},{"krate":0,"index":528}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":115554,"byte_end":115561,"line_start":862,"line_end":862,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":532}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":115705,"byte_end":115712,"line_start":869,"line_end":869,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":536}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":115904,"byte_end":115911,"line_start":876,"line_end":876,"column_start":47,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":540}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":116068,"byte_end":116075,"line_start":883,"line_end":883,"column_start":48,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":544}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":116290,"byte_end":116297,"line_start":890,"line_end":890,"column_start":65,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":548}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":116498,"byte_end":116505,"line_start":897,"line_end":897,"column_start":66,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":552}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":116730,"byte_end":116737,"line_start":904,"line_end":904,"column_start":49,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":556}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":116832,"byte_end":116836,"line_start":910,"line_end":910,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":560},{"krate":0,"index":562}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":116991,"byte_end":116994,"line_start":917,"line_end":917,"column_start":47,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":566}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":117145,"byte_end":117148,"line_start":923,"line_end":923,"column_start":47,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":570}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":117287,"byte_end":117291,"line_start":929,"line_end":929,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":574}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":117385,"byte_end":117392,"line_start":935,"line_end":935,"column_start":35,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":578}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":117485,"byte_end":117489,"line_start":941,"line_end":941,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":582}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":117589,"byte_end":117596,"line_start":947,"line_end":947,"column_start":31,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":586}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":117707,"byte_end":117710,"line_start":953,"line_end":953,"column_start":42,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":590}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":117950,"byte_end":117957,"line_start":961,"line_end":961,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":594}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":118080,"byte_end":118083,"line_start":967,"line_end":967,"column_start":37,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":598}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":118196,"byte_end":118199,"line_start":973,"line_end":973,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":602}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":118411,"byte_end":118425,"line_start":981,"line_end":981,"column_start":28,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":606}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":118592,"byte_end":118606,"line_start":987,"line_end":987,"column_start":28,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":610}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":22912,"byte_end":22920,"line_start":84,"line_end":84,"column_start":16,"column_end":24},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":654},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":35220,"byte_end":35228,"line_start":411,"line_end":411,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":654},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":47641,"byte_end":47649,"line_start":748,"line_end":748,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":654},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":67851,"byte_end":67856,"line_start":1273,"line_end":1273,"column_start":16,"column_end":21},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":694},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":75252,"byte_end":75257,"line_start":1474,"line_end":1474,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":694},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":77368,"byte_end":77373,"line_start":1541,"line_end":1541,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":694},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":83066,"byte_end":83074,"line_start":1689,"line_end":1689,"column_start":33,"column_end":41},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":654},"to":{"krate":2,"index":2582}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":83189,"byte_end":83192,"line_start":1695,"line_end":1695,"column_start":47,"column_end":50},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":4,"index":3390},"to":{"krate":2,"index":2586}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":83369,"byte_end":83372,"line_start":1701,"line_end":1701,"column_start":47,"column_end":50},"kind":{"variant":"Impl","fields":[8]},"from":{"krate":4,"index":3390},"to":{"krate":2,"index":2586}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":83532,"byte_end":83540,"line_start":1707,"line_end":1707,"column_start":30,"column_end":38},"kind":{"variant":"Impl","fields":[9]},"from":{"krate":1,"index":9254},"to":{"krate":2,"index":2586}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":83650,"byte_end":83658,"line_start":1713,"line_end":1713,"column_start":30,"column_end":38},"kind":{"variant":"Impl","fields":[10]},"from":{"krate":1,"index":9254},"to":{"krate":2,"index":2586}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":83776,"byte_end":83783,"line_start":1719,"line_end":1719,"column_start":38,"column_end":45},"kind":{"variant":"Impl","fields":[11]},"from":{"krate":0,"index":770},"to":{"krate":2,"index":2586}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":83923,"byte_end":83931,"line_start":1725,"line_end":1725,"column_start":65,"column_end":73},"kind":{"variant":"Impl","fields":[12]},"from":{"krate":0,"index":654},"to":{"krate":2,"index":2586}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":84067,"byte_end":84075,"line_start":1731,"line_end":1731,"column_start":57,"column_end":65},"kind":{"variant":"Impl","fields":[13]},"from":{"krate":0,"index":654},"to":{"krate":2,"index":2000}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":84271,"byte_end":84279,"line_start":1740,"line_end":1740,"column_start":36,"column_end":44},"kind":{"variant":"Impl","fields":[14]},"from":{"krate":0,"index":654},"to":{"krate":2,"index":1906}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":84787,"byte_end":84795,"line_start":1763,"line_end":1763,"column_start":18,"column_end":26},"kind":{"variant":"Impl","fields":[15]},"from":{"krate":0,"index":654},"to":{"krate":2,"index":2564}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":84933,"byte_end":84941,"line_start":1770,"line_end":1770,"column_start":18,"column_end":26},"kind":{"variant":"Impl","fields":[16]},"from":{"krate":0,"index":654},"to":{"krate":2,"index":2564}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":85260,"byte_end":85268,"line_start":1780,"line_end":1780,"column_start":25,"column_end":33},"kind":{"variant":"Impl","fields":[17]},"from":{"krate":0,"index":654},"to":{"krate":2,"index":1934}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":85457,"byte_end":85465,"line_start":1789,"line_end":1789,"column_start":50,"column_end":58},"kind":{"variant":"Impl","fields":[18]},"from":{"krate":0,"index":654},"to":{"krate":2,"index":2648}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":85561,"byte_end":85566,"line_start":1795,"line_end":1795,"column_start":28,"column_end":33},"kind":{"variant":"Impl","fields":[19]},"from":{"krate":0,"index":694},"to":{"krate":4,"index":3374}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":85725,"byte_end":85728,"line_start":1802,"line_end":1802,"column_start":48,"column_end":51},"kind":{"variant":"Impl","fields":[20]},"from":{"krate":4,"index":3390},"to":{"krate":2,"index":2586}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":85910,"byte_end":85913,"line_start":1808,"line_end":1808,"column_start":48,"column_end":51},"kind":{"variant":"Impl","fields":[21]},"from":{"krate":4,"index":3390},"to":{"krate":2,"index":2586}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":86083,"byte_end":86088,"line_start":1814,"line_end":1814,"column_start":36,"column_end":41},"kind":{"variant":"Impl","fields":[22]},"from":{"krate":0,"index":694},"to":{"krate":2,"index":2574}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":86183,"byte_end":86191,"line_start":1820,"line_end":1820,"column_start":36,"column_end":44},"kind":{"variant":"Impl","fields":[23]},"from":{"krate":0,"index":654},"to":{"krate":2,"index":2574}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":86285,"byte_end":86290,"line_start":1826,"line_end":1826,"column_start":31,"column_end":36},"kind":{"variant":"Impl","fields":[24]},"from":{"krate":0,"index":694},"to":{"krate":2,"index":2574}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":86390,"byte_end":86398,"line_start":1832,"line_end":1832,"column_start":31,"column_end":39},"kind":{"variant":"Impl","fields":[25]},"from":{"krate":0,"index":654},"to":{"krate":2,"index":2574}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":86510,"byte_end":86513,"line_start":1838,"line_end":1838,"column_start":43,"column_end":46},"kind":{"variant":"Impl","fields":[26]},"from":{"krate":4,"index":178},"to":{"krate":2,"index":2586}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":86758,"byte_end":86766,"line_start":1845,"line_end":1845,"column_start":40,"column_end":48},"kind":{"variant":"Impl","fields":[27]},"from":{"krate":0,"index":654},"to":{"krate":2,"index":2586}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":86898,"byte_end":86901,"line_start":1852,"line_end":1852,"column_start":38,"column_end":41},"kind":{"variant":"Impl","fields":[28]},"from":{"krate":4,"index":178},"to":{"krate":2,"index":2586}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":87040,"byte_end":87043,"line_start":1859,"line_end":1859,"column_start":28,"column_end":31},"kind":{"variant":"Impl","fields":[29]},"from":{"krate":4,"index":178},"to":{"krate":2,"index":2564}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":87243,"byte_end":87251,"line_start":1866,"line_end":1866,"column_start":16,"column_end":24},"kind":{"variant":"Impl","fields":[30]},"from":{"krate":0,"index":730},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":87638,"byte_end":87646,"line_start":1879,"line_end":1879,"column_start":33,"column_end":41},"kind":{"variant":"Impl","fields":[31]},"from":{"krate":0,"index":730},"to":{"krate":2,"index":2582}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":87752,"byte_end":87760,"line_start":1885,"line_end":1885,"column_start":38,"column_end":46},"kind":{"variant":"Impl","fields":[32]},"from":{"krate":0,"index":730},"to":{"krate":2,"index":7864}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":87941,"byte_end":87949,"line_start":1891,"line_end":1891,"column_start":38,"column_end":46},"kind":{"variant":"Impl","fields":[33]},"from":{"krate":0,"index":730},"to":{"krate":1,"index":2340}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":88041,"byte_end":88056,"line_start":1897,"line_end":1897,"column_start":16,"column_end":31},"kind":{"variant":"Impl","fields":[34]},"from":{"krate":0,"index":750},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":88300,"byte_end":88315,"line_start":1905,"line_end":1905,"column_start":38,"column_end":53},"kind":{"variant":"Impl","fields":[35]},"from":{"krate":0,"index":750},"to":{"krate":2,"index":7864}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,99,115,116,114,105,110,103,46,114,115],"byte_start":88487,"byte_end":88502,"line_start":1911,"line_end":1911,"column_start":38,"column_end":53},"kind":{"variant":"Impl","fields":[36]},"from":{"krate":0,"index":750},"to":{"krate":1,"index":2340}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":91565,"byte_end":91572,"line_start":81,"line_end":81,"column_start":16,"column_end":23},"kind":{"variant":"Impl","fields":[37]},"from":{"krate":0,"index":770},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":98415,"byte_end":98422,"line_start":303,"line_end":303,"column_start":6,"column_end":13},"kind":{"variant":"Impl","fields":[38]},"from":{"krate":0,"index":770},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":101147,"byte_end":101154,"line_start":387,"line_end":387,"column_start":6,"column_end":13},"kind":{"variant":"Impl","fields":[39]},"from":{"krate":0,"index":770},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":105158,"byte_end":105162,"line_start":506,"line_end":506,"column_start":16,"column_end":20},"kind":{"variant":"Impl","fields":[40]},"from":{"krate":0,"index":814},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":107461,"byte_end":107465,"line_start":579,"line_end":579,"column_start":6,"column_end":10},"kind":{"variant":"Impl","fields":[41]},"from":{"krate":0,"index":814},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":109478,"byte_end":109482,"line_start":645,"line_end":645,"column_start":6,"column_end":10},"kind":{"variant":"Impl","fields":[42]},"from":{"krate":0,"index":814},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":113608,"byte_end":113615,"line_start":766,"line_end":766,"column_start":33,"column_end":40},"kind":{"variant":"Impl","fields":[43]},"from":{"krate":0,"index":770},"to":{"krate":2,"index":2582}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":113729,"byte_end":113732,"line_start":772,"line_end":772,"column_start":46,"column_end":49},"kind":{"variant":"Impl","fields":[44]},"from":{"krate":4,"index":3390},"to":{"krate":2,"index":2586}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":113878,"byte_end":113881,"line_start":778,"line_end":778,"column_start":46,"column_end":49},"kind":{"variant":"Impl","fields":[45]},"from":{"krate":4,"index":3390},"to":{"krate":2,"index":2586}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":114010,"byte_end":114013,"line_start":784,"line_end":784,"column_start":29,"column_end":32},"kind":{"variant":"Impl","fields":[46]},"from":{"krate":4,"index":4422},"to":{"krate":2,"index":2582}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":114126,"byte_end":114129,"line_start":790,"line_end":790,"column_start":29,"column_end":32},"kind":{"variant":"Impl","fields":[47]},"from":{"krate":4,"index":4422},"to":{"krate":2,"index":2582}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":114242,"byte_end":114245,"line_start":796,"line_end":796,"column_start":29,"column_end":32},"kind":{"variant":"Impl","fields":[48]},"from":{"krate":4,"index":4422},"to":{"krate":2,"index":2582}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":114355,"byte_end":114362,"line_start":802,"line_end":802,"column_start":23,"column_end":30},"kind":{"variant":"Impl","fields":[49]},"from":{"krate":0,"index":770},"to":{"krate":2,"index":2586}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":114461,"byte_end":114468,"line_start":808,"line_end":808,"column_start":23,"column_end":30},"kind":{"variant":"Impl","fields":[50]},"from":{"krate":0,"index":770},"to":{"krate":2,"index":2586}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":114569,"byte_end":114576,"line_start":814,"line_end":814,"column_start":25,"column_end":32},"kind":{"variant":"Impl","fields":[51]},"from":{"krate":0,"index":770},"to":{"krate":2,"index":2586}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":114682,"byte_end":114689,"line_start":820,"line_end":820,"column_start":25,"column_end":32},"kind":{"variant":"Impl","fields":[52]},"from":{"krate":0,"index":770},"to":{"krate":2,"index":2586}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":114799,"byte_end":114807,"line_start":826,"line_end":826,"column_start":29,"column_end":37},"kind":{"variant":"Impl","fields":[53]},"from":{"krate":1,"index":9254},"to":{"krate":2,"index":2586}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":114911,"byte_end":114919,"line_start":832,"line_end":832,"column_start":29,"column_end":37},"kind":{"variant":"Impl","fields":[54]},"from":{"krate":1,"index":9254},"to":{"krate":2,"index":2586}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":115058,"byte_end":115065,"line_start":838,"line_end":838,"column_start":64,"column_end":71},"kind":{"variant":"Impl","fields":[55]},"from":{"krate":0,"index":770},"to":{"krate":2,"index":2586}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":115200,"byte_end":115207,"line_start":844,"line_end":844,"column_start":57,"column_end":64},"kind":{"variant":"Impl","fields":[56]},"from":{"krate":0,"index":770},"to":{"krate":2,"index":2000}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":115400,"byte_end":115407,"line_start":853,"line_end":853,"column_start":36,"column_end":43},"kind":{"variant":"Impl","fields":[57]},"from":{"krate":0,"index":770},"to":{"krate":2,"index":1906}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":115554,"byte_end":115561,"line_start":862,"line_end":862,"column_start":39,"column_end":46},"kind":{"variant":"Impl","fields":[58]},"from":{"krate":0,"index":770},"to":{"krate":2,"index":2342}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":115705,"byte_end":115712,"line_start":869,"line_end":869,"column_start":40,"column_end":47},"kind":{"variant":"Impl","fields":[59]},"from":{"krate":0,"index":770},"to":{"krate":2,"index":2396}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":115904,"byte_end":115911,"line_start":876,"line_end":876,"column_start":47,"column_end":54},"kind":{"variant":"Impl","fields":[60]},"from":{"krate":0,"index":770},"to":{"krate":2,"index":2342}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":116068,"byte_end":116075,"line_start":883,"line_end":883,"column_start":48,"column_end":55},"kind":{"variant":"Impl","fields":[61]},"from":{"krate":0,"index":770},"to":{"krate":2,"index":2396}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":116290,"byte_end":116297,"line_start":890,"line_end":890,"column_start":65,"column_end":72},"kind":{"variant":"Impl","fields":[62]},"from":{"krate":0,"index":770},"to":{"krate":2,"index":2342}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":116498,"byte_end":116505,"line_start":897,"line_end":897,"column_start":66,"column_end":73},"kind":{"variant":"Impl","fields":[63]},"from":{"krate":0,"index":770},"to":{"krate":2,"index":2396}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":116730,"byte_end":116737,"line_start":904,"line_end":904,"column_start":49,"column_end":56},"kind":{"variant":"Impl","fields":[64]},"from":{"krate":0,"index":770},"to":{"krate":2,"index":2648}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":116832,"byte_end":116836,"line_start":910,"line_end":910,"column_start":28,"column_end":32},"kind":{"variant":"Impl","fields":[65]},"from":{"krate":0,"index":814},"to":{"krate":4,"index":3374}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":116991,"byte_end":116994,"line_start":917,"line_end":917,"column_start":47,"column_end":50},"kind":{"variant":"Impl","fields":[66]},"from":{"krate":4,"index":3390},"to":{"krate":2,"index":2586}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":117145,"byte_end":117148,"line_start":923,"line_end":923,"column_start":47,"column_end":50},"kind":{"variant":"Impl","fields":[67]},"from":{"krate":4,"index":3390},"to":{"krate":2,"index":2586}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":117287,"byte_end":117291,"line_start":929,"line_end":929,"column_start":35,"column_end":39},"kind":{"variant":"Impl","fields":[68]},"from":{"krate":0,"index":814},"to":{"krate":2,"index":2574}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":117385,"byte_end":117392,"line_start":935,"line_end":935,"column_start":35,"column_end":42},"kind":{"variant":"Impl","fields":[69]},"from":{"krate":0,"index":770},"to":{"krate":2,"index":2574}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":117485,"byte_end":117489,"line_start":941,"line_end":941,"column_start":31,"column_end":35},"kind":{"variant":"Impl","fields":[70]},"from":{"krate":0,"index":814},"to":{"krate":2,"index":2574}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":117589,"byte_end":117596,"line_start":947,"line_end":947,"column_start":31,"column_end":38},"kind":{"variant":"Impl","fields":[71]},"from":{"krate":0,"index":770},"to":{"krate":2,"index":2574}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":117707,"byte_end":117710,"line_start":953,"line_end":953,"column_start":42,"column_end":45},"kind":{"variant":"Impl","fields":[72]},"from":{"krate":4,"index":178},"to":{"krate":2,"index":2586}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":117950,"byte_end":117957,"line_start":961,"line_end":961,"column_start":39,"column_end":46},"kind":{"variant":"Impl","fields":[73]},"from":{"krate":0,"index":770},"to":{"krate":2,"index":2586}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":118080,"byte_end":118083,"line_start":967,"line_end":967,"column_start":37,"column_end":40},"kind":{"variant":"Impl","fields":[74]},"from":{"krate":4,"index":178},"to":{"krate":2,"index":2586}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":118196,"byte_end":118199,"line_start":973,"line_end":973,"column_start":28,"column_end":31},"kind":{"variant":"Impl","fields":[75]},"from":{"krate":4,"index":178},"to":{"krate":2,"index":2564}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":118411,"byte_end":118425,"line_start":981,"line_end":981,"column_start":28,"column_end":42},"kind":{"variant":"Impl","fields":[76]},"from":{"krate":0,"index":850},"to":{"krate":2,"index":7864}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,117,115,116,114,105,110,103,46,114,115],"byte_start":118592,"byte_end":118606,"line_start":987,"line_end":987,"column_start":28,"column_end":42},"kind":{"variant":"Impl","fields":[77]},"from":{"krate":0,"index":850},"to":{"krate":1,"index":2340}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":10089,"byte_end":10094,"line_start":195,"line_end":195,"column_start":18,"column_end":23},"kind":"SuperTrait","from":{"krate":2,"index":7860},"to":{"krate":0,"index":616}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":10097,"byte_end":10102,"line_start":195,"line_end":195,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":1668},"to":{"krate":0,"index":616}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":10105,"byte_end":10109,"line_start":195,"line_end":195,"column_start":34,"column_end":38},"kind":"SuperTrait","from":{"krate":2,"index":1672},"to":{"krate":0,"index":616}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":10112,"byte_end":10115,"line_start":195,"line_end":195,"column_start":41,"column_end":44},"kind":"SuperTrait","from":{"krate":2,"index":2378},"to":{"krate":0,"index":616}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,109,97,114,99,117,115,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,119,105,100,101,115,116,114,105,110,103,45,48,46,52,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":10118,"byte_end":10120,"line_start":195,"line_end":195,"column_start":47,"column_end":49},"kind":"SuperTrait","from":{"krate":2,"index":2348},"to":{"krate":0,"index":616}}]}